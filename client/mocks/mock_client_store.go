// Code generated by MockGen. DO NOT EDIT.
// Source: client_store.go
//
// Generated by this command:
//
//	mockgen -source=client_store.go -destination=mocks/mock_client_store.go -package=mock_client
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	client "github.com/pilab-dev/shadow-sso/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClientStore is a mock of ClientStore interface.
type MockClientStore struct {
	ctrl     *gomock.Controller
	recorder *MockClientStoreMockRecorder
	isgomock struct{}
}

// MockClientStoreMockRecorder is the mock recorder for MockClientStore.
type MockClientStoreMockRecorder struct {
	mock *MockClientStore
}

// NewMockClientStore creates a new mock instance.
func NewMockClientStore(ctrl *gomock.Controller) *MockClientStore {
	mock := &MockClientStore{ctrl: ctrl}
	mock.recorder = &MockClientStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientStore) EXPECT() *MockClientStoreMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockClientStore) CreateClient(ctx context.Context, arg1 *client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockClientStoreMockRecorder) CreateClient(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockClientStore)(nil).CreateClient), ctx, arg1)
}

// DeleteClient mocks base method.
func (m *MockClientStore) DeleteClient(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockClientStoreMockRecorder) DeleteClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockClientStore)(nil).DeleteClient), ctx, clientID)
}

// GetClient mocks base method.
func (m *MockClientStore) GetClient(ctx context.Context, clientID string) (*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, clientID)
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientStoreMockRecorder) GetClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientStore)(nil).GetClient), ctx, clientID)
}

// ListClients mocks base method.
func (m *MockClientStore) ListClients(ctx context.Context, filter client.ClientFilter) ([]*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients", ctx, filter)
	ret0, _ := ret[0].([]*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockClientStoreMockRecorder) ListClients(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockClientStore)(nil).ListClients), ctx, filter)
}

// UpdateClient mocks base method.
func (m *MockClientStore) UpdateClient(ctx context.Context, arg1 *client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockClientStoreMockRecorder) UpdateClient(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockClientStore)(nil).UpdateClient), ctx, arg1)
}

// ValidateClient mocks base method.
func (m *MockClientStore) ValidateClient(ctx context.Context, clientID, clientSecret string) (*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClient", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateClient indicates an expected call of ValidateClient.
func (mr *MockClientStoreMockRecorder) ValidateClient(ctx, clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClient", reflect.TypeOf((*MockClientStore)(nil).ValidateClient), ctx, clientID, clientSecret)
}
