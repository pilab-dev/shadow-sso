// Code generated by MockGen. DO NOT EDIT.
// Source: repository_provider.go
//
// Generated by this command:
//
//	mockgen -source=repository_provider.go -destination=mocks/mock_repository_provider.go -package=mock_services RepositoryProvider
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	domain "github.com/pilab-dev/shadow-sso/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryProvider is a mock of RepositoryProvider interface.
type MockRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryProviderMockRecorder
	isgomock struct{}
}

// MockRepositoryProviderMockRecorder is the mock recorder for MockRepositoryProvider.
type MockRepositoryProviderMockRecorder struct {
	mock *MockRepositoryProvider
}

// NewMockRepositoryProvider creates a new mock instance.
func NewMockRepositoryProvider(ctrl *gomock.Controller) *MockRepositoryProvider {
	mock := &MockRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryProvider) EXPECT() *MockRepositoryProviderMockRecorder {
	return m.recorder
}

// AuthorizationCodeRepository mocks base method.
func (m *MockRepositoryProvider) AuthorizationCodeRepository(ctx context.Context) domain.AuthorizationCodeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationCodeRepository", ctx)
	ret0, _ := ret[0].(domain.AuthorizationCodeRepository)
	return ret0
}

// AuthorizationCodeRepository indicates an expected call of AuthorizationCodeRepository.
func (mr *MockRepositoryProviderMockRecorder) AuthorizationCodeRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationCodeRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).AuthorizationCodeRepository), ctx)
}

// ClientRepository mocks base method.
func (m *MockRepositoryProvider) ClientRepository(ctx context.Context) domain.ClientRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientRepository", ctx)
	ret0, _ := ret[0].(domain.ClientRepository)
	return ret0
}

// ClientRepository indicates an expected call of ClientRepository.
func (mr *MockRepositoryProviderMockRecorder) ClientRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).ClientRepository), ctx)
}

// DeviceAuthorizationRepository mocks base method.
func (m *MockRepositoryProvider) DeviceAuthorizationRepository(ctx context.Context) domain.DeviceAuthorizationRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceAuthorizationRepository", ctx)
	ret0, _ := ret[0].(domain.DeviceAuthorizationRepository)
	return ret0
}

// DeviceAuthorizationRepository indicates an expected call of DeviceAuthorizationRepository.
func (mr *MockRepositoryProviderMockRecorder) DeviceAuthorizationRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceAuthorizationRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).DeviceAuthorizationRepository), ctx)
}

// IdPRepository mocks base method.
func (m *MockRepositoryProvider) IdPRepository(ctx context.Context) domain.IdPRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdPRepository", ctx)
	ret0, _ := ret[0].(domain.IdPRepository)
	return ret0
}

// IdPRepository indicates an expected call of IdPRepository.
func (mr *MockRepositoryProviderMockRecorder) IdPRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdPRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).IdPRepository), ctx)
}

// PkceRepository mocks base method.
func (m *MockRepositoryProvider) PkceRepository(ctx context.Context) domain.PkceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PkceRepository", ctx)
	ret0, _ := ret[0].(domain.PkceRepository)
	return ret0
}

// PkceRepository indicates an expected call of PkceRepository.
func (mr *MockRepositoryProviderMockRecorder) PkceRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PkceRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).PkceRepository), ctx)
}

// PublicKeyRepository mocks base method.
func (m *MockRepositoryProvider) PublicKeyRepository(ctx context.Context) domain.PublicKeyRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKeyRepository", ctx)
	ret0, _ := ret[0].(domain.PublicKeyRepository)
	return ret0
}

// PublicKeyRepository indicates an expected call of PublicKeyRepository.
func (mr *MockRepositoryProviderMockRecorder) PublicKeyRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKeyRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).PublicKeyRepository), ctx)
}

// ServiceAccountRepository mocks base method.
func (m *MockRepositoryProvider) ServiceAccountRepository(ctx context.Context) domain.ServiceAccountRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccountRepository", ctx)
	ret0, _ := ret[0].(domain.ServiceAccountRepository)
	return ret0
}

// ServiceAccountRepository indicates an expected call of ServiceAccountRepository.
func (mr *MockRepositoryProviderMockRecorder) ServiceAccountRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccountRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).ServiceAccountRepository), ctx)
}

// SessionRepository mocks base method.
func (m *MockRepositoryProvider) SessionRepository(ctx context.Context) domain.SessionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionRepository", ctx)
	ret0, _ := ret[0].(domain.SessionRepository)
	return ret0
}

// SessionRepository indicates an expected call of SessionRepository.
func (mr *MockRepositoryProviderMockRecorder) SessionRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).SessionRepository), ctx)
}

// TokenRepository mocks base method.
func (m *MockRepositoryProvider) TokenRepository(ctx context.Context) domain.TokenRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenRepository", ctx)
	ret0, _ := ret[0].(domain.TokenRepository)
	return ret0
}

// TokenRepository indicates an expected call of TokenRepository.
func (mr *MockRepositoryProviderMockRecorder) TokenRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).TokenRepository), ctx)
}

// UserFederatedIdentityRepository mocks base method.
func (m *MockRepositoryProvider) UserFederatedIdentityRepository(ctx context.Context) domain.UserFederatedIdentityRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFederatedIdentityRepository", ctx)
	ret0, _ := ret[0].(domain.UserFederatedIdentityRepository)
	return ret0
}

// UserFederatedIdentityRepository indicates an expected call of UserFederatedIdentityRepository.
func (mr *MockRepositoryProviderMockRecorder) UserFederatedIdentityRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFederatedIdentityRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).UserFederatedIdentityRepository), ctx)
}

// UserRepository mocks base method.
func (m *MockRepositoryProvider) UserRepository(ctx context.Context) domain.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository", ctx)
	ret0, _ := ret[0].(domain.UserRepository)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockRepositoryProviderMockRecorder) UserRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockRepositoryProvider)(nil).UserRepository), ctx)
}
