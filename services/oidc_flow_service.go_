//go:generate go run go.uber.org/mock/mockgen -source=$GOFILE -destination=mocks/mock_$GOFILE -package=mock_$GOPACKAGE
package services

import (
	"context"
	"errors"

	"connectrpc.com/connect"
	ssov1 "github.com/pilab-dev/shadow-sso/gen/proto/sso/v1"
	"github.com/pilab-dev/shadow-sso/gen/proto/sso/v1/ssov1connect"
	"github.com/pilab-dev/shadow-sso/internal/oidcflow"
	"github.com/rs/zerolog/log"

	// client "github.com/pilab-dev/shadow-sso/client" // May need clientStore to get ClientName
	"github.com/pilab-dev/shadow-sso/domain" // For domain.ClientRepository or similar
)

// FlowStoreRetriever defines the interface for retrieving OIDC flow states.
// This allows oidcflow.InMemoryFlowStore to be used, or any other persistent store.
type FlowStoreRetriever interface {
	GetFlow(flowID string) (*oidcflow.LoginFlowState, error)
	// We might also need DeleteFlow if the service should clean up after retrieval,
	// but usually, the flow is deleted after the code is exchanged.
}

// ClientRetriever defines an interface to get client details.
// This is needed to fetch the client_name for the GetOidcFlowStateResponse.
type ClientRetriever interface {
	GetClient(ctx context.Context, clientID string) (*domain.Client, error) // Using domain.Client from existing repositories
}

// OidcFlowServiceImpl implements the ssov1connect.OidcFlowServiceHandler interface.
type OidcFlowServiceImpl struct {
	ssov1connect.UnimplementedOidcFlowServiceHandler // For forward compatibility
	flowStore                                        FlowStoreRetriever
	clientRepo                                       domain.ClientRepository // To fetch client details like name
	// In a larger setup, clientRepo might be a ClientService that abstracts the repository.
}

// NewOidcFlowService creates a new OidcFlowServiceImpl.
func NewOidcFlowService(flowStore FlowStoreRetriever, clientRepo domain.ClientRepository) *OidcFlowServiceImpl {
	return &OidcFlowServiceImpl{
		flowStore:  flowStore,
		clientRepo: clientRepo,
	}
}

// GetOidcFlowState retrieves non-sensitive details of an OIDC login flow.
func (s *OidcFlowServiceImpl) GetOidcFlowState(
	ctx context.Context,
	req *connect.Request[ssov1.GetOidcFlowStateRequest],
) (*connect.Response[ssov1.GetOidcFlowStateResponse], error) {
	flowID := req.Msg.GetFlowId()
	if flowID == "" {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("flow_id is required"))
	}

	flowState, err := s.flowStore.GetFlow(flowID)
	if err != nil {
		if errors.Is(err, oidcflow.ErrFlowNotFound) {
			log.Warn().Str("flowId", flowID).Msg("OIDC flow not found")
			return nil, connect.NewError(connect.CodeNotFound, errors.New("flow not found or already used"))
		}
		if errors.Is(err, oidcflow.ErrFlowExpired) {
			log.Warn().Str("flowId", flowID).Msg("OIDC flow expired")
			// Consider deleting the expired flow: s.flowStore.DeleteFlow(flowID)
			return nil, connect.NewError(connect.CodeNotFound, errors.New("flow expired"))
		}
		log.Error().Err(err).Str("flowId", flowID).Msg("Error retrieving OIDC flow state")
		return nil, connect.NewError(connect.CodeInternal, errors.New("failed to retrieve flow state"))
	}

	// Fetch client details to get client_name
	// Note: The client.Client struct from `client/client.go` is the one stored by `mongo_client_repository`
	// which implements `domain.ClientRepository`.
	oauthClient, err := s.clientRepo.GetClient(ctx, flowState.ClientID)
	var clientName string
	if err != nil {
		log.Warn().Err(err).Str("clientID", flowState.ClientID).Msg("Could not retrieve client details for OIDC flow state response")
		// Proceed without client name, or return an error if it's critical
		clientName = flowState.ClientID // Fallback to client_id if name fetch fails
	} else {
		clientName = oauthClient.Name
	}

	// Construct response with only non-sensitive information
	respMsg := &ssov1.GetOidcFlowStateResponse{
		ClientId:           flowState.ClientID,
		ClientName:         clientName,
		Scope:              flowState.Scope,
		OriginalOidcParams: flowState.OriginalOIDCParams,
		// DO NOT include flowState.CodeChallenge, flowState.UserID, etc.
	}

	return connect.NewResponse(respMsg), nil
}

// Ensure OidcFlowServiceImpl implements the handler interface (compile-time check)
// This line will cause a compile error until ssov1connect.OidcFlowServiceHandler is generated
// from a proto definition that includes this service and its methods.
// var _ ssov1connect.OidcFlowServiceHandler = (*OidcFlowServiceImpl)(nil)
