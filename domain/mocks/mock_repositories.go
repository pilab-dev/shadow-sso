// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories.go
//
// Generated by this command:
//
//	mockgen -source=domain/repositories.go -destination=domain/mocks/mock_repositories.go -package=mocks IdPRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/pilab-dev/shadow-sso/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPublicKeyRepository is a mock of PublicKeyRepository interface.
type MockPublicKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyRepositoryMockRecorder
	isgomock struct{}
}

// MockPublicKeyRepositoryMockRecorder is the mock recorder for MockPublicKeyRepository.
type MockPublicKeyRepositoryMockRecorder struct {
	mock *MockPublicKeyRepository
}

// NewMockPublicKeyRepository creates a new mock instance.
func NewMockPublicKeyRepository(ctrl *gomock.Controller) *MockPublicKeyRepository {
	mock := &MockPublicKeyRepository{ctrl: ctrl}
	mock.recorder = &MockPublicKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicKeyRepository) EXPECT() *MockPublicKeyRepositoryMockRecorder {
	return m.recorder
}

// CreatePublicKey mocks base method.
func (m *MockPublicKeyRepository) CreatePublicKey(ctx context.Context, pubKeyInfo *domain.PublicKeyInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicKey", ctx, pubKeyInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePublicKey indicates an expected call of CreatePublicKey.
func (mr *MockPublicKeyRepositoryMockRecorder) CreatePublicKey(ctx, pubKeyInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKey", reflect.TypeOf((*MockPublicKeyRepository)(nil).CreatePublicKey), ctx, pubKeyInfo)
}

// GetPublicKey mocks base method.
func (m *MockPublicKeyRepository) GetPublicKey(ctx context.Context, keyID string) (*domain.PublicKeyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, keyID)
	ret0, _ := ret[0].(*domain.PublicKeyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockPublicKeyRepositoryMockRecorder) GetPublicKey(ctx, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockPublicKeyRepository)(nil).GetPublicKey), ctx, keyID)
}

// ListPublicKeysForServiceAccount mocks base method.
func (m *MockPublicKeyRepository) ListPublicKeysForServiceAccount(ctx context.Context, serviceAccountID string, onlyActive bool) ([]*domain.PublicKeyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeysForServiceAccount", ctx, serviceAccountID, onlyActive)
	ret0, _ := ret[0].([]*domain.PublicKeyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicKeysForServiceAccount indicates an expected call of ListPublicKeysForServiceAccount.
func (mr *MockPublicKeyRepositoryMockRecorder) ListPublicKeysForServiceAccount(ctx, serviceAccountID, onlyActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeysForServiceAccount", reflect.TypeOf((*MockPublicKeyRepository)(nil).ListPublicKeysForServiceAccount), ctx, serviceAccountID, onlyActive)
}

// UpdatePublicKeyStatus mocks base method.
func (m *MockPublicKeyRepository) UpdatePublicKeyStatus(ctx context.Context, keyID, newStatus string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicKeyStatus", ctx, keyID, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePublicKeyStatus indicates an expected call of UpdatePublicKeyStatus.
func (mr *MockPublicKeyRepositoryMockRecorder) UpdatePublicKeyStatus(ctx, keyID, newStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicKeyStatus", reflect.TypeOf((*MockPublicKeyRepository)(nil).UpdatePublicKeyStatus), ctx, keyID, newStatus)
}

// MockServiceAccountRepository is a mock of ServiceAccountRepository interface.
type MockServiceAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockServiceAccountRepositoryMockRecorder is the mock recorder for MockServiceAccountRepository.
type MockServiceAccountRepositoryMockRecorder struct {
	mock *MockServiceAccountRepository
}

// NewMockServiceAccountRepository creates a new mock instance.
func NewMockServiceAccountRepository(ctrl *gomock.Controller) *MockServiceAccountRepository {
	mock := &MockServiceAccountRepository{ctrl: ctrl}
	mock.recorder = &MockServiceAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountRepository) EXPECT() *MockServiceAccountRepositoryMockRecorder {
	return m.recorder
}

// CreateServiceAccount mocks base method.
func (m *MockServiceAccountRepository) CreateServiceAccount(ctx context.Context, sa *domain.ServiceAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceAccount", ctx, sa)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockServiceAccountRepositoryMockRecorder) CreateServiceAccount(ctx, sa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockServiceAccountRepository)(nil).CreateServiceAccount), ctx, sa)
}

// DeleteServiceAccount mocks base method.
func (m *MockServiceAccountRepository) DeleteServiceAccount(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockServiceAccountRepositoryMockRecorder) DeleteServiceAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockServiceAccountRepository)(nil).DeleteServiceAccount), ctx, id)
}

// GetServiceAccount mocks base method.
func (m *MockServiceAccountRepository) GetServiceAccount(ctx context.Context, id string) (*domain.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccount", ctx, id)
	ret0, _ := ret[0].(*domain.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccount indicates an expected call of GetServiceAccount.
func (mr *MockServiceAccountRepositoryMockRecorder) GetServiceAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockServiceAccountRepository)(nil).GetServiceAccount), ctx, id)
}

// GetServiceAccountByClientEmail mocks base method.
func (m *MockServiceAccountRepository) GetServiceAccountByClientEmail(ctx context.Context, clientEmail string) (*domain.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountByClientEmail", ctx, clientEmail)
	ret0, _ := ret[0].(*domain.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByClientEmail indicates an expected call of GetServiceAccountByClientEmail.
func (mr *MockServiceAccountRepositoryMockRecorder) GetServiceAccountByClientEmail(ctx, clientEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByClientEmail", reflect.TypeOf((*MockServiceAccountRepository)(nil).GetServiceAccountByClientEmail), ctx, clientEmail)
}

// UpdateServiceAccount mocks base method.
func (m *MockServiceAccountRepository) UpdateServiceAccount(ctx context.Context, sa *domain.ServiceAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceAccount", ctx, sa)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockServiceAccountRepositoryMockRecorder) UpdateServiceAccount(ctx, sa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockServiceAccountRepository)(nil).UpdateServiceAccount), ctx, sa)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, id)
}

// ListUsers mocks base method.
func (m *MockUserRepository) ListUsers(ctx context.Context, pageToken string, pageSize int) ([]*domain.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, pageToken, pageSize)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserRepositoryMockRecorder) ListUsers(ctx, pageToken, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserRepository)(nil).ListUsers), ctx, pageToken, pageSize)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
	isgomock struct{}
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockSessionRepository) DeleteSession(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionRepositoryMockRecorder) DeleteSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionRepository)(nil).DeleteSession), ctx, id)
}

// DeleteSessionsByUserID mocks base method.
func (m *MockSessionRepository) DeleteSessionsByUserID(ctx context.Context, userID string, exceptSessionID ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, userID}
	for _, a := range exceptSessionID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSessionsByUserID", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSessionsByUserID indicates an expected call of DeleteSessionsByUserID.
func (mr *MockSessionRepositoryMockRecorder) DeleteSessionsByUserID(ctx, userID any, exceptSessionID ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, userID}, exceptSessionID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionsByUserID", reflect.TypeOf((*MockSessionRepository)(nil).DeleteSessionsByUserID), varargs...)
}

// GetSessionByID mocks base method.
func (m *MockSessionRepository) GetSessionByID(ctx context.Context, id string) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", ctx, id)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockSessionRepositoryMockRecorder) GetSessionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockSessionRepository)(nil).GetSessionByID), ctx, id)
}

// GetSessionByTokenID mocks base method.
func (m *MockSessionRepository) GetSessionByTokenID(ctx context.Context, tokenID string) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByTokenID", ctx, tokenID)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByTokenID indicates an expected call of GetSessionByTokenID.
func (mr *MockSessionRepositoryMockRecorder) GetSessionByTokenID(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByTokenID", reflect.TypeOf((*MockSessionRepository)(nil).GetSessionByTokenID), ctx, tokenID)
}

// ListSessionsByUserID mocks base method.
func (m *MockSessionRepository) ListSessionsByUserID(ctx context.Context, userID string, filter domain.SessionFilter) ([]*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsByUserID", ctx, userID, filter)
	ret0, _ := ret[0].([]*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionsByUserID indicates an expected call of ListSessionsByUserID.
func (mr *MockSessionRepositoryMockRecorder) ListSessionsByUserID(ctx, userID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsByUserID", reflect.TypeOf((*MockSessionRepository)(nil).ListSessionsByUserID), ctx, userID, filter)
}

// StoreSession mocks base method.
func (m *MockSessionRepository) StoreSession(ctx context.Context, session *domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSession indicates an expected call of StoreSession.
func (mr *MockSessionRepositoryMockRecorder) StoreSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSession", reflect.TypeOf((*MockSessionRepository)(nil).StoreSession), ctx, session)
}

// UpdateSession mocks base method.
func (m *MockSessionRepository) UpdateSession(ctx context.Context, session *domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockSessionRepositoryMockRecorder) UpdateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockSessionRepository)(nil).UpdateSession), ctx, session)
}

// MockIdPRepository is a mock of IdPRepository interface.
type MockIdPRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdPRepositoryMockRecorder
	isgomock struct{}
}

// MockIdPRepositoryMockRecorder is the mock recorder for MockIdPRepository.
type MockIdPRepositoryMockRecorder struct {
	mock *MockIdPRepository
}

// NewMockIdPRepository creates a new mock instance.
func NewMockIdPRepository(ctrl *gomock.Controller) *MockIdPRepository {
	mock := &MockIdPRepository{ctrl: ctrl}
	mock.recorder = &MockIdPRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdPRepository) EXPECT() *MockIdPRepositoryMockRecorder {
	return m.recorder
}

// AddIdP mocks base method.
func (m *MockIdPRepository) AddIdP(ctx context.Context, idp *domain.IdentityProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIdP", ctx, idp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIdP indicates an expected call of AddIdP.
func (mr *MockIdPRepositoryMockRecorder) AddIdP(ctx, idp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIdP", reflect.TypeOf((*MockIdPRepository)(nil).AddIdP), ctx, idp)
}

// DeleteIdP mocks base method.
func (m *MockIdPRepository) DeleteIdP(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdP", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdP indicates an expected call of DeleteIdP.
func (mr *MockIdPRepositoryMockRecorder) DeleteIdP(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdP", reflect.TypeOf((*MockIdPRepository)(nil).DeleteIdP), ctx, id)
}

// GetIdPByID mocks base method.
func (m *MockIdPRepository) GetIdPByID(ctx context.Context, id string) (*domain.IdentityProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdPByID", ctx, id)
	ret0, _ := ret[0].(*domain.IdentityProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdPByID indicates an expected call of GetIdPByID.
func (mr *MockIdPRepositoryMockRecorder) GetIdPByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdPByID", reflect.TypeOf((*MockIdPRepository)(nil).GetIdPByID), ctx, id)
}

// GetIdPByName mocks base method.
func (m *MockIdPRepository) GetIdPByName(ctx context.Context, name string) (*domain.IdentityProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdPByName", ctx, name)
	ret0, _ := ret[0].(*domain.IdentityProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdPByName indicates an expected call of GetIdPByName.
func (mr *MockIdPRepositoryMockRecorder) GetIdPByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdPByName", reflect.TypeOf((*MockIdPRepository)(nil).GetIdPByName), ctx, name)
}

// ListIdPs mocks base method.
func (m *MockIdPRepository) ListIdPs(ctx context.Context, onlyEnabled bool) ([]*domain.IdentityProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdPs", ctx, onlyEnabled)
	ret0, _ := ret[0].([]*domain.IdentityProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdPs indicates an expected call of ListIdPs.
func (mr *MockIdPRepositoryMockRecorder) ListIdPs(ctx, onlyEnabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdPs", reflect.TypeOf((*MockIdPRepository)(nil).ListIdPs), ctx, onlyEnabled)
}

// UpdateIdP mocks base method.
func (m *MockIdPRepository) UpdateIdP(ctx context.Context, idp *domain.IdentityProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdP", ctx, idp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdP indicates an expected call of UpdateIdP.
func (mr *MockIdPRepositoryMockRecorder) UpdateIdP(ctx, idp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdP", reflect.TypeOf((*MockIdPRepository)(nil).UpdateIdP), ctx, idp)
}

// MockUserFederatedIdentityRepository is a mock of UserFederatedIdentityRepository interface.
type MockUserFederatedIdentityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserFederatedIdentityRepositoryMockRecorder
	isgomock struct{}
}

// MockUserFederatedIdentityRepositoryMockRecorder is the mock recorder for MockUserFederatedIdentityRepository.
type MockUserFederatedIdentityRepositoryMockRecorder struct {
	mock *MockUserFederatedIdentityRepository
}

// NewMockUserFederatedIdentityRepository creates a new mock instance.
func NewMockUserFederatedIdentityRepository(ctrl *gomock.Controller) *MockUserFederatedIdentityRepository {
	mock := &MockUserFederatedIdentityRepository{ctrl: ctrl}
	mock.recorder = &MockUserFederatedIdentityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFederatedIdentityRepository) EXPECT() *MockUserFederatedIdentityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserFederatedIdentityRepository) Create(ctx context.Context, identity *domain.UserFederatedIdentity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserFederatedIdentityRepositoryMockRecorder) Create(ctx, identity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserFederatedIdentityRepository)(nil).Create), ctx, identity)
}

// Delete mocks base method.
func (m *MockUserFederatedIdentityRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserFederatedIdentityRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserFederatedIdentityRepository)(nil).Delete), ctx, id)
}

// DeleteByUserIDAndProvider mocks base method.
func (m *MockUserFederatedIdentityRepository) DeleteByUserIDAndProvider(ctx context.Context, userID, providerName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDAndProvider", ctx, userID, providerName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndProvider indicates an expected call of DeleteByUserIDAndProvider.
func (mr *MockUserFederatedIdentityRepositoryMockRecorder) DeleteByUserIDAndProvider(ctx, userID, providerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndProvider", reflect.TypeOf((*MockUserFederatedIdentityRepository)(nil).DeleteByUserIDAndProvider), ctx, userID, providerName)
}

// GetByProviderUserID mocks base method.
func (m *MockUserFederatedIdentityRepository) GetByProviderUserID(ctx context.Context, providerName, providerUserID string) (*domain.UserFederatedIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProviderUserID", ctx, providerName, providerUserID)
	ret0, _ := ret[0].(*domain.UserFederatedIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProviderUserID indicates an expected call of GetByProviderUserID.
func (mr *MockUserFederatedIdentityRepositoryMockRecorder) GetByProviderUserID(ctx, providerName, providerUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProviderUserID", reflect.TypeOf((*MockUserFederatedIdentityRepository)(nil).GetByProviderUserID), ctx, providerName, providerUserID)
}

// GetByUserIDAndProvider mocks base method.
func (m *MockUserFederatedIdentityRepository) GetByUserIDAndProvider(ctx context.Context, userID, providerName string) (*domain.UserFederatedIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndProvider", ctx, userID, providerName)
	ret0, _ := ret[0].(*domain.UserFederatedIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndProvider indicates an expected call of GetByUserIDAndProvider.
func (mr *MockUserFederatedIdentityRepositoryMockRecorder) GetByUserIDAndProvider(ctx, userID, providerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndProvider", reflect.TypeOf((*MockUserFederatedIdentityRepository)(nil).GetByUserIDAndProvider), ctx, userID, providerName)
}

// ListByUserID mocks base method.
func (m *MockUserFederatedIdentityRepository) ListByUserID(ctx context.Context, userID string) ([]*domain.UserFederatedIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.UserFederatedIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockUserFederatedIdentityRepositoryMockRecorder) ListByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockUserFederatedIdentityRepository)(nil).ListByUserID), ctx, userID)
}
