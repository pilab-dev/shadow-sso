// Code generated by MockGen. DO NOT EDIT.
// Source: client_store.go
//
// Generated by this command:
//
//	mockgen -source=client_store.go -destination=mocks/mock_client_store.go -package=mock_domain ClientRepository
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	domain "github.com/pilab-dev/shadow-sso/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockClientRepository is a mock of ClientRepository interface.
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
	isgomock struct{}
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository.
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance.
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockClientRepository) CreateClient(ctx context.Context, client *domain.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockClientRepositoryMockRecorder) CreateClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockClientRepository)(nil).CreateClient), ctx, client)
}

// DeleteClient mocks base method.
func (m *MockClientRepository) DeleteClient(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockClientRepositoryMockRecorder) DeleteClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockClientRepository)(nil).DeleteClient), ctx, clientID)
}

// GetClient mocks base method.
func (m *MockClientRepository) GetClient(ctx context.Context, clientID string) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, clientID)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientRepositoryMockRecorder) GetClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientRepository)(nil).GetClient), ctx, clientID)
}

// ListClients mocks base method.
func (m *MockClientRepository) ListClients(ctx context.Context, filter domain.ClientFilter) ([]*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients", ctx, filter)
	ret0, _ := ret[0].([]*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockClientRepositoryMockRecorder) ListClients(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockClientRepository)(nil).ListClients), ctx, filter)
}

// UpdateClient mocks base method.
func (m *MockClientRepository) UpdateClient(ctx context.Context, client *domain.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockClientRepositoryMockRecorder) UpdateClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockClientRepository)(nil).UpdateClient), ctx, client)
}

// ValidateClient mocks base method.
func (m *MockClientRepository) ValidateClient(ctx context.Context, clientID, clientSecret string) (*domain.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateClient", ctx, clientID, clientSecret)
	ret0, _ := ret[0].(*domain.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateClient indicates an expected call of ValidateClient.
func (mr *MockClientRepositoryMockRecorder) ValidateClient(ctx, clientID, clientSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateClient", reflect.TypeOf((*MockClientRepository)(nil).ValidateClient), ctx, clientID, clientSecret)
}
