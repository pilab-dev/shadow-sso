// Code generated by MockGen. DO NOT EDIT.
// Source: token_store.go
//
// Generated by this command:
//
//	mockgen -source=token_store.go -destination=mocks/mock_token_store.go -package=mock_cache TokenStore
//

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"

	cache "github.com/pilab-dev/shadow-sso/cache"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
	isgomock struct{}
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockTokenStore) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockTokenStoreMockRecorder) Clear(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockTokenStore)(nil).Clear), ctx)
}

// Count mocks base method.
func (m *MockTokenStore) Count(ctx context.Context) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockTokenStoreMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTokenStore)(nil).Count), ctx)
}

// Delete mocks base method.
func (m *MockTokenStore) Delete(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenStoreMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenStore)(nil).Delete), ctx, token)
}

// DeleteExpired mocks base method.
func (m *MockTokenStore) DeleteExpired(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpired", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpired indicates an expected call of DeleteExpired.
func (mr *MockTokenStoreMockRecorder) DeleteExpired(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpired", reflect.TypeOf((*MockTokenStore)(nil).DeleteExpired), ctx)
}

// Get mocks base method.
func (m *MockTokenStore) Get(ctx context.Context, token string) (*cache.TokenEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(*cache.TokenEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenStoreMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenStore)(nil).Get), ctx, token)
}

// Set mocks base method.
func (m *MockTokenStore) Set(ctx context.Context, token *cache.TokenEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTokenStoreMockRecorder) Set(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTokenStore)(nil).Set), ctx, token)
}
