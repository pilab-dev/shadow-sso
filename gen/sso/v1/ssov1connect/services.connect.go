// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sso/v1/services.proto

package ssov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pilab-dev/shadow-sso/gen/sso/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceAccountServiceName is the fully-qualified name of the ServiceAccountService service.
	ServiceAccountServiceName = "sso.v1.ServiceAccountService"
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "sso.v1.UserService"
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "sso.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceAccountServiceCreateServiceAccountKeyProcedure is the fully-qualified name of the
	// ServiceAccountService's CreateServiceAccountKey RPC.
	ServiceAccountServiceCreateServiceAccountKeyProcedure = "/sso.v1.ServiceAccountService/CreateServiceAccountKey"
	// ServiceAccountServiceListServiceAccountKeysProcedure is the fully-qualified name of the
	// ServiceAccountService's ListServiceAccountKeys RPC.
	ServiceAccountServiceListServiceAccountKeysProcedure = "/sso.v1.ServiceAccountService/ListServiceAccountKeys"
	// ServiceAccountServiceDeleteServiceAccountKeyProcedure is the fully-qualified name of the
	// ServiceAccountService's DeleteServiceAccountKey RPC.
	ServiceAccountServiceDeleteServiceAccountKeyProcedure = "/sso.v1.ServiceAccountService/DeleteServiceAccountKey"
	// UserServiceRegisterUserProcedure is the fully-qualified name of the UserService's RegisterUser
	// RPC.
	UserServiceRegisterUserProcedure = "/sso.v1.UserService/RegisterUser"
	// UserServiceActivateUserProcedure is the fully-qualified name of the UserService's ActivateUser
	// RPC.
	UserServiceActivateUserProcedure = "/sso.v1.UserService/ActivateUser"
	// UserServiceLockUserProcedure is the fully-qualified name of the UserService's LockUser RPC.
	UserServiceLockUserProcedure = "/sso.v1.UserService/LockUser"
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/sso.v1.UserService/ListUsers"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/sso.v1.UserService/GetUser"
	// UserServiceChangePasswordProcedure is the fully-qualified name of the UserService's
	// ChangePassword RPC.
	UserServiceChangePasswordProcedure = "/sso.v1.UserService/ChangePassword"
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/sso.v1.AuthService/Login"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/sso.v1.AuthService/Logout"
	// AuthServiceListUserSessionsProcedure is the fully-qualified name of the AuthService's
	// ListUserSessions RPC.
	AuthServiceListUserSessionsProcedure = "/sso.v1.AuthService/ListUserSessions"
	// AuthServiceClearUserSessionsProcedure is the fully-qualified name of the AuthService's
	// ClearUserSessions RPC.
	AuthServiceClearUserSessionsProcedure = "/sso.v1.AuthService/ClearUserSessions"
)

// ServiceAccountServiceClient is a client for the sso.v1.ServiceAccountService service.
type ServiceAccountServiceClient interface {
	CreateServiceAccountKey(context.Context, *connect.Request[v1.CreateServiceAccountKeyRequest]) (*connect.Response[v1.CreateServiceAccountKeyResponse], error)
	ListServiceAccountKeys(context.Context, *connect.Request[v1.ListServiceAccountKeysRequest]) (*connect.Response[v1.ListServiceAccountKeysResponse], error)
	DeleteServiceAccountKey(context.Context, *connect.Request[v1.DeleteServiceAccountKeyRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewServiceAccountServiceClient constructs a client for the sso.v1.ServiceAccountService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceAccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serviceAccountServiceMethods := v1.File_sso_v1_services_proto.Services().ByName("ServiceAccountService").Methods()
	return &serviceAccountServiceClient{
		createServiceAccountKey: connect.NewClient[v1.CreateServiceAccountKeyRequest, v1.CreateServiceAccountKeyResponse](
			httpClient,
			baseURL+ServiceAccountServiceCreateServiceAccountKeyProcedure,
			connect.WithSchema(serviceAccountServiceMethods.ByName("CreateServiceAccountKey")),
			connect.WithClientOptions(opts...),
		),
		listServiceAccountKeys: connect.NewClient[v1.ListServiceAccountKeysRequest, v1.ListServiceAccountKeysResponse](
			httpClient,
			baseURL+ServiceAccountServiceListServiceAccountKeysProcedure,
			connect.WithSchema(serviceAccountServiceMethods.ByName("ListServiceAccountKeys")),
			connect.WithClientOptions(opts...),
		),
		deleteServiceAccountKey: connect.NewClient[v1.DeleteServiceAccountKeyRequest, emptypb.Empty](
			httpClient,
			baseURL+ServiceAccountServiceDeleteServiceAccountKeyProcedure,
			connect.WithSchema(serviceAccountServiceMethods.ByName("DeleteServiceAccountKey")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceAccountServiceClient implements ServiceAccountServiceClient.
type serviceAccountServiceClient struct {
	createServiceAccountKey *connect.Client[v1.CreateServiceAccountKeyRequest, v1.CreateServiceAccountKeyResponse]
	listServiceAccountKeys  *connect.Client[v1.ListServiceAccountKeysRequest, v1.ListServiceAccountKeysResponse]
	deleteServiceAccountKey *connect.Client[v1.DeleteServiceAccountKeyRequest, emptypb.Empty]
}

// CreateServiceAccountKey calls sso.v1.ServiceAccountService.CreateServiceAccountKey.
func (c *serviceAccountServiceClient) CreateServiceAccountKey(ctx context.Context, req *connect.Request[v1.CreateServiceAccountKeyRequest]) (*connect.Response[v1.CreateServiceAccountKeyResponse], error) {
	return c.createServiceAccountKey.CallUnary(ctx, req)
}

// ListServiceAccountKeys calls sso.v1.ServiceAccountService.ListServiceAccountKeys.
func (c *serviceAccountServiceClient) ListServiceAccountKeys(ctx context.Context, req *connect.Request[v1.ListServiceAccountKeysRequest]) (*connect.Response[v1.ListServiceAccountKeysResponse], error) {
	return c.listServiceAccountKeys.CallUnary(ctx, req)
}

// DeleteServiceAccountKey calls sso.v1.ServiceAccountService.DeleteServiceAccountKey.
func (c *serviceAccountServiceClient) DeleteServiceAccountKey(ctx context.Context, req *connect.Request[v1.DeleteServiceAccountKeyRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteServiceAccountKey.CallUnary(ctx, req)
}

// ServiceAccountServiceHandler is an implementation of the sso.v1.ServiceAccountService service.
type ServiceAccountServiceHandler interface {
	CreateServiceAccountKey(context.Context, *connect.Request[v1.CreateServiceAccountKeyRequest]) (*connect.Response[v1.CreateServiceAccountKeyResponse], error)
	ListServiceAccountKeys(context.Context, *connect.Request[v1.ListServiceAccountKeysRequest]) (*connect.Response[v1.ListServiceAccountKeysResponse], error)
	DeleteServiceAccountKey(context.Context, *connect.Request[v1.DeleteServiceAccountKeyRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewServiceAccountServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceAccountServiceHandler(svc ServiceAccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceAccountServiceMethods := v1.File_sso_v1_services_proto.Services().ByName("ServiceAccountService").Methods()
	serviceAccountServiceCreateServiceAccountKeyHandler := connect.NewUnaryHandler(
		ServiceAccountServiceCreateServiceAccountKeyProcedure,
		svc.CreateServiceAccountKey,
		connect.WithSchema(serviceAccountServiceMethods.ByName("CreateServiceAccountKey")),
		connect.WithHandlerOptions(opts...),
	)
	serviceAccountServiceListServiceAccountKeysHandler := connect.NewUnaryHandler(
		ServiceAccountServiceListServiceAccountKeysProcedure,
		svc.ListServiceAccountKeys,
		connect.WithSchema(serviceAccountServiceMethods.ByName("ListServiceAccountKeys")),
		connect.WithHandlerOptions(opts...),
	)
	serviceAccountServiceDeleteServiceAccountKeyHandler := connect.NewUnaryHandler(
		ServiceAccountServiceDeleteServiceAccountKeyProcedure,
		svc.DeleteServiceAccountKey,
		connect.WithSchema(serviceAccountServiceMethods.ByName("DeleteServiceAccountKey")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sso.v1.ServiceAccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceAccountServiceCreateServiceAccountKeyProcedure:
			serviceAccountServiceCreateServiceAccountKeyHandler.ServeHTTP(w, r)
		case ServiceAccountServiceListServiceAccountKeysProcedure:
			serviceAccountServiceListServiceAccountKeysHandler.ServeHTTP(w, r)
		case ServiceAccountServiceDeleteServiceAccountKeyProcedure:
			serviceAccountServiceDeleteServiceAccountKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceAccountServiceHandler struct{}

func (UnimplementedServiceAccountServiceHandler) CreateServiceAccountKey(context.Context, *connect.Request[v1.CreateServiceAccountKeyRequest]) (*connect.Response[v1.CreateServiceAccountKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.ServiceAccountService.CreateServiceAccountKey is not implemented"))
}

func (UnimplementedServiceAccountServiceHandler) ListServiceAccountKeys(context.Context, *connect.Request[v1.ListServiceAccountKeysRequest]) (*connect.Response[v1.ListServiceAccountKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.ServiceAccountService.ListServiceAccountKeys is not implemented"))
}

func (UnimplementedServiceAccountServiceHandler) DeleteServiceAccountKey(context.Context, *connect.Request[v1.DeleteServiceAccountKeyRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.ServiceAccountService.DeleteServiceAccountKey is not implemented"))
}

// UserServiceClient is a client for the sso.v1.UserService service.
type UserServiceClient interface {
	RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error)
	ActivateUser(context.Context, *connect.Request[v1.ActivateUserRequest]) (*connect.Response[emptypb.Empty], error)
	LockUser(context.Context, *connect.Request[v1.LockUserRequest]) (*connect.Response[emptypb.Empty], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewUserServiceClient constructs a client for the sso.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_sso_v1_services_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		registerUser: connect.NewClient[v1.RegisterUserRequest, v1.RegisterUserResponse](
			httpClient,
			baseURL+UserServiceRegisterUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("RegisterUser")),
			connect.WithClientOptions(opts...),
		),
		activateUser: connect.NewClient[v1.ActivateUserRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceActivateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("ActivateUser")),
			connect.WithClientOptions(opts...),
		),
		lockUser: connect.NewClient[v1.LockUserRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceLockUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("LockUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[v1.ChangePasswordRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceChangePasswordProcedure,
			connect.WithSchema(userServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	registerUser   *connect.Client[v1.RegisterUserRequest, v1.RegisterUserResponse]
	activateUser   *connect.Client[v1.ActivateUserRequest, emptypb.Empty]
	lockUser       *connect.Client[v1.LockUserRequest, emptypb.Empty]
	listUsers      *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getUser        *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	changePassword *connect.Client[v1.ChangePasswordRequest, emptypb.Empty]
}

// RegisterUser calls sso.v1.UserService.RegisterUser.
func (c *userServiceClient) RegisterUser(ctx context.Context, req *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// ActivateUser calls sso.v1.UserService.ActivateUser.
func (c *userServiceClient) ActivateUser(ctx context.Context, req *connect.Request[v1.ActivateUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.activateUser.CallUnary(ctx, req)
}

// LockUser calls sso.v1.UserService.LockUser.
func (c *userServiceClient) LockUser(ctx context.Context, req *connect.Request[v1.LockUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.lockUser.CallUnary(ctx, req)
}

// ListUsers calls sso.v1.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUser calls sso.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ChangePassword calls sso.v1.UserService.ChangePassword.
func (c *userServiceClient) ChangePassword(ctx context.Context, req *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the sso.v1.UserService service.
type UserServiceHandler interface {
	RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error)
	ActivateUser(context.Context, *connect.Request[v1.ActivateUserRequest]) (*connect.Response[emptypb.Empty], error)
	LockUser(context.Context, *connect.Request[v1.LockUserRequest]) (*connect.Response[emptypb.Empty], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_sso_v1_services_proto.Services().ByName("UserService").Methods()
	userServiceRegisterUserHandler := connect.NewUnaryHandler(
		UserServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(userServiceMethods.ByName("RegisterUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceActivateUserHandler := connect.NewUnaryHandler(
		UserServiceActivateUserProcedure,
		svc.ActivateUser,
		connect.WithSchema(userServiceMethods.ByName("ActivateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLockUserHandler := connect.NewUnaryHandler(
		UserServiceLockUserProcedure,
		svc.LockUser,
		connect.WithSchema(userServiceMethods.ByName("LockUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceChangePasswordHandler := connect.NewUnaryHandler(
		UserServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(userServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sso.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceRegisterUserProcedure:
			userServiceRegisterUserHandler.ServeHTTP(w, r)
		case UserServiceActivateUserProcedure:
			userServiceActivateUserHandler.ServeHTTP(w, r)
		case UserServiceLockUserProcedure:
			userServiceLockUserHandler.ServeHTTP(w, r)
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceChangePasswordProcedure:
			userServiceChangePasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.UserService.RegisterUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ActivateUser(context.Context, *connect.Request[v1.ActivateUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.UserService.ActivateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) LockUser(context.Context, *connect.Request[v1.LockUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.UserService.LockUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.UserService.ListUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.UserService.ChangePassword is not implemented"))
}

// AuthServiceClient is a client for the sso.v1.AuthService service.
type AuthServiceClient interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error)
	ListUserSessions(context.Context, *connect.Request[v1.ListUserSessionsRequest]) (*connect.Response[v1.ListUserSessionsResponse], error)
	ClearUserSessions(context.Context, *connect.Request[v1.ClearUserSessionsRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewAuthServiceClient constructs a client for the sso.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_sso_v1_services_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		listUserSessions: connect.NewClient[v1.ListUserSessionsRequest, v1.ListUserSessionsResponse](
			httpClient,
			baseURL+AuthServiceListUserSessionsProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListUserSessions")),
			connect.WithClientOptions(opts...),
		),
		clearUserSessions: connect.NewClient[v1.ClearUserSessionsRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceClearUserSessionsProcedure,
			connect.WithSchema(authServiceMethods.ByName("ClearUserSessions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login             *connect.Client[v1.LoginRequest, v1.LoginResponse]
	logout            *connect.Client[v1.LogoutRequest, emptypb.Empty]
	listUserSessions  *connect.Client[v1.ListUserSessionsRequest, v1.ListUserSessionsResponse]
	clearUserSessions *connect.Client[v1.ClearUserSessionsRequest, emptypb.Empty]
}

// Login calls sso.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls sso.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.logout.CallUnary(ctx, req)
}

// ListUserSessions calls sso.v1.AuthService.ListUserSessions.
func (c *authServiceClient) ListUserSessions(ctx context.Context, req *connect.Request[v1.ListUserSessionsRequest]) (*connect.Response[v1.ListUserSessionsResponse], error) {
	return c.listUserSessions.CallUnary(ctx, req)
}

// ClearUserSessions calls sso.v1.AuthService.ClearUserSessions.
func (c *authServiceClient) ClearUserSessions(ctx context.Context, req *connect.Request[v1.ClearUserSessionsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.clearUserSessions.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the sso.v1.AuthService service.
type AuthServiceHandler interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error)
	ListUserSessions(context.Context, *connect.Request[v1.ListUserSessionsRequest]) (*connect.Response[v1.ListUserSessionsResponse], error)
	ClearUserSessions(context.Context, *connect.Request[v1.ClearUserSessionsRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_sso_v1_services_proto.Services().ByName("AuthService").Methods()
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListUserSessionsHandler := connect.NewUnaryHandler(
		AuthServiceListUserSessionsProcedure,
		svc.ListUserSessions,
		connect.WithSchema(authServiceMethods.ByName("ListUserSessions")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceClearUserSessionsHandler := connect.NewUnaryHandler(
		AuthServiceClearUserSessionsProcedure,
		svc.ClearUserSessions,
		connect.WithSchema(authServiceMethods.ByName("ClearUserSessions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sso.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceListUserSessionsProcedure:
			authServiceListUserSessionsHandler.ServeHTTP(w, r)
		case AuthServiceClearUserSessionsProcedure:
			authServiceClearUserSessionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListUserSessions(context.Context, *connect.Request[v1.ListUserSessionsRequest]) (*connect.Response[v1.ListUserSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.AuthService.ListUserSessions is not implemented"))
}

func (UnimplementedAuthServiceHandler) ClearUserSessions(context.Context, *connect.Request[v1.ClearUserSessionsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.AuthService.ClearUserSessions is not implemented"))
}
