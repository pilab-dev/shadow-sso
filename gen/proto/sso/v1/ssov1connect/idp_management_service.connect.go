// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/sso/v1/idp_management_service.proto

package ssov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pilab-dev/shadow-sso/gen/proto/sso/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// IdPManagementServiceName is the fully-qualified name of the IdPManagementService service.
	IdPManagementServiceName = "sso.v1.IdPManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdPManagementServiceAddIdPProcedure is the fully-qualified name of the IdPManagementService's
	// AddIdP RPC.
	IdPManagementServiceAddIdPProcedure = "/sso.v1.IdPManagementService/AddIdP"
	// IdPManagementServiceGetIdPProcedure is the fully-qualified name of the IdPManagementService's
	// GetIdP RPC.
	IdPManagementServiceGetIdPProcedure = "/sso.v1.IdPManagementService/GetIdP"
	// IdPManagementServiceListIdPsProcedure is the fully-qualified name of the IdPManagementService's
	// ListIdPs RPC.
	IdPManagementServiceListIdPsProcedure = "/sso.v1.IdPManagementService/ListIdPs"
	// IdPManagementServiceUpdateIdPProcedure is the fully-qualified name of the IdPManagementService's
	// UpdateIdP RPC.
	IdPManagementServiceUpdateIdPProcedure = "/sso.v1.IdPManagementService/UpdateIdP"
	// IdPManagementServiceDeleteIdPProcedure is the fully-qualified name of the IdPManagementService's
	// DeleteIdP RPC.
	IdPManagementServiceDeleteIdPProcedure = "/sso.v1.IdPManagementService/DeleteIdP"
)

// IdPManagementServiceClient is a client for the sso.v1.IdPManagementService service.
type IdPManagementServiceClient interface {
	// Adds a new IdP configuration.
	AddIdP(context.Context, *connect.Request[v1.AddIdPRequest]) (*connect.Response[v1.AddIdPResponse], error)
	// Retrieves an IdP configuration by its ID.
	GetIdP(context.Context, *connect.Request[v1.GetIdPRequest]) (*connect.Response[v1.GetIdPResponse], error)
	// Lists all configured IdPs.
	ListIdPs(context.Context, *connect.Request[v1.ListIdPsRequest]) (*connect.Response[v1.ListIdPsResponse], error)
	// Updates an existing IdP configuration.
	UpdateIdP(context.Context, *connect.Request[v1.UpdateIdPRequest]) (*connect.Response[v1.UpdateIdPResponse], error)
	// Deletes an IdP configuration by its ID.
	DeleteIdP(context.Context, *connect.Request[v1.DeleteIdPRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewIdPManagementServiceClient constructs a client for the sso.v1.IdPManagementService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdPManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdPManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &idPManagementServiceClient{
		addIdP: connect.NewClient[v1.AddIdPRequest, v1.AddIdPResponse](
			httpClient,
			baseURL+IdPManagementServiceAddIdPProcedure,
			opts...,
		),
		getIdP: connect.NewClient[v1.GetIdPRequest, v1.GetIdPResponse](
			httpClient,
			baseURL+IdPManagementServiceGetIdPProcedure,
			opts...,
		),
		listIdPs: connect.NewClient[v1.ListIdPsRequest, v1.ListIdPsResponse](
			httpClient,
			baseURL+IdPManagementServiceListIdPsProcedure,
			opts...,
		),
		updateIdP: connect.NewClient[v1.UpdateIdPRequest, v1.UpdateIdPResponse](
			httpClient,
			baseURL+IdPManagementServiceUpdateIdPProcedure,
			opts...,
		),
		deleteIdP: connect.NewClient[v1.DeleteIdPRequest, emptypb.Empty](
			httpClient,
			baseURL+IdPManagementServiceDeleteIdPProcedure,
			opts...,
		),
	}
}

// idPManagementServiceClient implements IdPManagementServiceClient.
type idPManagementServiceClient struct {
	addIdP    *connect.Client[v1.AddIdPRequest, v1.AddIdPResponse]
	getIdP    *connect.Client[v1.GetIdPRequest, v1.GetIdPResponse]
	listIdPs  *connect.Client[v1.ListIdPsRequest, v1.ListIdPsResponse]
	updateIdP *connect.Client[v1.UpdateIdPRequest, v1.UpdateIdPResponse]
	deleteIdP *connect.Client[v1.DeleteIdPRequest, emptypb.Empty]
}

// AddIdP calls sso.v1.IdPManagementService.AddIdP.
func (c *idPManagementServiceClient) AddIdP(ctx context.Context, req *connect.Request[v1.AddIdPRequest]) (*connect.Response[v1.AddIdPResponse], error) {
	return c.addIdP.CallUnary(ctx, req)
}

// GetIdP calls sso.v1.IdPManagementService.GetIdP.
func (c *idPManagementServiceClient) GetIdP(ctx context.Context, req *connect.Request[v1.GetIdPRequest]) (*connect.Response[v1.GetIdPResponse], error) {
	return c.getIdP.CallUnary(ctx, req)
}

// ListIdPs calls sso.v1.IdPManagementService.ListIdPs.
func (c *idPManagementServiceClient) ListIdPs(ctx context.Context, req *connect.Request[v1.ListIdPsRequest]) (*connect.Response[v1.ListIdPsResponse], error) {
	return c.listIdPs.CallUnary(ctx, req)
}

// UpdateIdP calls sso.v1.IdPManagementService.UpdateIdP.
func (c *idPManagementServiceClient) UpdateIdP(ctx context.Context, req *connect.Request[v1.UpdateIdPRequest]) (*connect.Response[v1.UpdateIdPResponse], error) {
	return c.updateIdP.CallUnary(ctx, req)
}

// DeleteIdP calls sso.v1.IdPManagementService.DeleteIdP.
func (c *idPManagementServiceClient) DeleteIdP(ctx context.Context, req *connect.Request[v1.DeleteIdPRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteIdP.CallUnary(ctx, req)
}

// IdPManagementServiceHandler is an implementation of the sso.v1.IdPManagementService service.
type IdPManagementServiceHandler interface {
	// Adds a new IdP configuration.
	AddIdP(context.Context, *connect.Request[v1.AddIdPRequest]) (*connect.Response[v1.AddIdPResponse], error)
	// Retrieves an IdP configuration by its ID.
	GetIdP(context.Context, *connect.Request[v1.GetIdPRequest]) (*connect.Response[v1.GetIdPResponse], error)
	// Lists all configured IdPs.
	ListIdPs(context.Context, *connect.Request[v1.ListIdPsRequest]) (*connect.Response[v1.ListIdPsResponse], error)
	// Updates an existing IdP configuration.
	UpdateIdP(context.Context, *connect.Request[v1.UpdateIdPRequest]) (*connect.Response[v1.UpdateIdPResponse], error)
	// Deletes an IdP configuration by its ID.
	DeleteIdP(context.Context, *connect.Request[v1.DeleteIdPRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewIdPManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdPManagementServiceHandler(svc IdPManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	idPManagementServiceAddIdPHandler := connect.NewUnaryHandler(
		IdPManagementServiceAddIdPProcedure,
		svc.AddIdP,
		opts...,
	)
	idPManagementServiceGetIdPHandler := connect.NewUnaryHandler(
		IdPManagementServiceGetIdPProcedure,
		svc.GetIdP,
		opts...,
	)
	idPManagementServiceListIdPsHandler := connect.NewUnaryHandler(
		IdPManagementServiceListIdPsProcedure,
		svc.ListIdPs,
		opts...,
	)
	idPManagementServiceUpdateIdPHandler := connect.NewUnaryHandler(
		IdPManagementServiceUpdateIdPProcedure,
		svc.UpdateIdP,
		opts...,
	)
	idPManagementServiceDeleteIdPHandler := connect.NewUnaryHandler(
		IdPManagementServiceDeleteIdPProcedure,
		svc.DeleteIdP,
		opts...,
	)
	return "/sso.v1.IdPManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdPManagementServiceAddIdPProcedure:
			idPManagementServiceAddIdPHandler.ServeHTTP(w, r)
		case IdPManagementServiceGetIdPProcedure:
			idPManagementServiceGetIdPHandler.ServeHTTP(w, r)
		case IdPManagementServiceListIdPsProcedure:
			idPManagementServiceListIdPsHandler.ServeHTTP(w, r)
		case IdPManagementServiceUpdateIdPProcedure:
			idPManagementServiceUpdateIdPHandler.ServeHTTP(w, r)
		case IdPManagementServiceDeleteIdPProcedure:
			idPManagementServiceDeleteIdPHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdPManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIdPManagementServiceHandler struct{}

func (UnimplementedIdPManagementServiceHandler) AddIdP(context.Context, *connect.Request[v1.AddIdPRequest]) (*connect.Response[v1.AddIdPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.IdPManagementService.AddIdP is not implemented"))
}

func (UnimplementedIdPManagementServiceHandler) GetIdP(context.Context, *connect.Request[v1.GetIdPRequest]) (*connect.Response[v1.GetIdPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.IdPManagementService.GetIdP is not implemented"))
}

func (UnimplementedIdPManagementServiceHandler) ListIdPs(context.Context, *connect.Request[v1.ListIdPsRequest]) (*connect.Response[v1.ListIdPsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.IdPManagementService.ListIdPs is not implemented"))
}

func (UnimplementedIdPManagementServiceHandler) UpdateIdP(context.Context, *connect.Request[v1.UpdateIdPRequest]) (*connect.Response[v1.UpdateIdPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.IdPManagementService.UpdateIdP is not implemented"))
}

func (UnimplementedIdPManagementServiceHandler) DeleteIdP(context.Context, *connect.Request[v1.DeleteIdPRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.IdPManagementService.DeleteIdP is not implemented"))
}
