// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/sso/v1/client_management_service.proto

package ssov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pilab-dev/shadow-sso/gen/proto/sso/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ClientManagementServiceName is the fully-qualified name of the ClientManagementService service.
	ClientManagementServiceName = "sso.v1.ClientManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClientManagementServiceRegisterClientProcedure is the fully-qualified name of the
	// ClientManagementService's RegisterClient RPC.
	ClientManagementServiceRegisterClientProcedure = "/sso.v1.ClientManagementService/RegisterClient"
	// ClientManagementServiceGetClientProcedure is the fully-qualified name of the
	// ClientManagementService's GetClient RPC.
	ClientManagementServiceGetClientProcedure = "/sso.v1.ClientManagementService/GetClient"
	// ClientManagementServiceListClientsProcedure is the fully-qualified name of the
	// ClientManagementService's ListClients RPC.
	ClientManagementServiceListClientsProcedure = "/sso.v1.ClientManagementService/ListClients"
	// ClientManagementServiceUpdateClientProcedure is the fully-qualified name of the
	// ClientManagementService's UpdateClient RPC.
	ClientManagementServiceUpdateClientProcedure = "/sso.v1.ClientManagementService/UpdateClient"
	// ClientManagementServiceDeleteClientProcedure is the fully-qualified name of the
	// ClientManagementService's DeleteClient RPC.
	ClientManagementServiceDeleteClientProcedure = "/sso.v1.ClientManagementService/DeleteClient"
)

// ClientManagementServiceClient is a client for the sso.v1.ClientManagementService service.
type ClientManagementServiceClient interface {
	// Registers a new OAuth2 client.
	RegisterClient(context.Context, *connect.Request[v1.RegisterClientRequest]) (*connect.Response[v1.RegisterClientResponse], error)
	// Retrieves an OAuth2 client by its ID.
	GetClient(context.Context, *connect.Request[v1.GetClientRequest]) (*connect.Response[v1.GetClientResponse], error)
	// Lists OAuth2 clients with pagination.
	ListClients(context.Context, *connect.Request[v1.ListClientsRequest]) (*connect.Response[v1.ListClientsResponse], error)
	// Updates an existing OAuth2 client.
	UpdateClient(context.Context, *connect.Request[v1.UpdateClientRequest]) (*connect.Response[v1.UpdateClientResponse], error)
	// Deletes an OAuth2 client by its ID.
	DeleteClient(context.Context, *connect.Request[v1.DeleteClientRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewClientManagementServiceClient constructs a client for the sso.v1.ClientManagementService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClientManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClientManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clientManagementServiceClient{
		registerClient: connect.NewClient[v1.RegisterClientRequest, v1.RegisterClientResponse](
			httpClient,
			baseURL+ClientManagementServiceRegisterClientProcedure,
			opts...,
		),
		getClient: connect.NewClient[v1.GetClientRequest, v1.GetClientResponse](
			httpClient,
			baseURL+ClientManagementServiceGetClientProcedure,
			opts...,
		),
		listClients: connect.NewClient[v1.ListClientsRequest, v1.ListClientsResponse](
			httpClient,
			baseURL+ClientManagementServiceListClientsProcedure,
			opts...,
		),
		updateClient: connect.NewClient[v1.UpdateClientRequest, v1.UpdateClientResponse](
			httpClient,
			baseURL+ClientManagementServiceUpdateClientProcedure,
			opts...,
		),
		deleteClient: connect.NewClient[v1.DeleteClientRequest, emptypb.Empty](
			httpClient,
			baseURL+ClientManagementServiceDeleteClientProcedure,
			opts...,
		),
	}
}

// clientManagementServiceClient implements ClientManagementServiceClient.
type clientManagementServiceClient struct {
	registerClient *connect.Client[v1.RegisterClientRequest, v1.RegisterClientResponse]
	getClient      *connect.Client[v1.GetClientRequest, v1.GetClientResponse]
	listClients    *connect.Client[v1.ListClientsRequest, v1.ListClientsResponse]
	updateClient   *connect.Client[v1.UpdateClientRequest, v1.UpdateClientResponse]
	deleteClient   *connect.Client[v1.DeleteClientRequest, emptypb.Empty]
}

// RegisterClient calls sso.v1.ClientManagementService.RegisterClient.
func (c *clientManagementServiceClient) RegisterClient(ctx context.Context, req *connect.Request[v1.RegisterClientRequest]) (*connect.Response[v1.RegisterClientResponse], error) {
	return c.registerClient.CallUnary(ctx, req)
}

// GetClient calls sso.v1.ClientManagementService.GetClient.
func (c *clientManagementServiceClient) GetClient(ctx context.Context, req *connect.Request[v1.GetClientRequest]) (*connect.Response[v1.GetClientResponse], error) {
	return c.getClient.CallUnary(ctx, req)
}

// ListClients calls sso.v1.ClientManagementService.ListClients.
func (c *clientManagementServiceClient) ListClients(ctx context.Context, req *connect.Request[v1.ListClientsRequest]) (*connect.Response[v1.ListClientsResponse], error) {
	return c.listClients.CallUnary(ctx, req)
}

// UpdateClient calls sso.v1.ClientManagementService.UpdateClient.
func (c *clientManagementServiceClient) UpdateClient(ctx context.Context, req *connect.Request[v1.UpdateClientRequest]) (*connect.Response[v1.UpdateClientResponse], error) {
	return c.updateClient.CallUnary(ctx, req)
}

// DeleteClient calls sso.v1.ClientManagementService.DeleteClient.
func (c *clientManagementServiceClient) DeleteClient(ctx context.Context, req *connect.Request[v1.DeleteClientRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteClient.CallUnary(ctx, req)
}

// ClientManagementServiceHandler is an implementation of the sso.v1.ClientManagementService
// service.
type ClientManagementServiceHandler interface {
	// Registers a new OAuth2 client.
	RegisterClient(context.Context, *connect.Request[v1.RegisterClientRequest]) (*connect.Response[v1.RegisterClientResponse], error)
	// Retrieves an OAuth2 client by its ID.
	GetClient(context.Context, *connect.Request[v1.GetClientRequest]) (*connect.Response[v1.GetClientResponse], error)
	// Lists OAuth2 clients with pagination.
	ListClients(context.Context, *connect.Request[v1.ListClientsRequest]) (*connect.Response[v1.ListClientsResponse], error)
	// Updates an existing OAuth2 client.
	UpdateClient(context.Context, *connect.Request[v1.UpdateClientRequest]) (*connect.Response[v1.UpdateClientResponse], error)
	// Deletes an OAuth2 client by its ID.
	DeleteClient(context.Context, *connect.Request[v1.DeleteClientRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewClientManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClientManagementServiceHandler(svc ClientManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clientManagementServiceRegisterClientHandler := connect.NewUnaryHandler(
		ClientManagementServiceRegisterClientProcedure,
		svc.RegisterClient,
		opts...,
	)
	clientManagementServiceGetClientHandler := connect.NewUnaryHandler(
		ClientManagementServiceGetClientProcedure,
		svc.GetClient,
		opts...,
	)
	clientManagementServiceListClientsHandler := connect.NewUnaryHandler(
		ClientManagementServiceListClientsProcedure,
		svc.ListClients,
		opts...,
	)
	clientManagementServiceUpdateClientHandler := connect.NewUnaryHandler(
		ClientManagementServiceUpdateClientProcedure,
		svc.UpdateClient,
		opts...,
	)
	clientManagementServiceDeleteClientHandler := connect.NewUnaryHandler(
		ClientManagementServiceDeleteClientProcedure,
		svc.DeleteClient,
		opts...,
	)
	return "/sso.v1.ClientManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClientManagementServiceRegisterClientProcedure:
			clientManagementServiceRegisterClientHandler.ServeHTTP(w, r)
		case ClientManagementServiceGetClientProcedure:
			clientManagementServiceGetClientHandler.ServeHTTP(w, r)
		case ClientManagementServiceListClientsProcedure:
			clientManagementServiceListClientsHandler.ServeHTTP(w, r)
		case ClientManagementServiceUpdateClientProcedure:
			clientManagementServiceUpdateClientHandler.ServeHTTP(w, r)
		case ClientManagementServiceDeleteClientProcedure:
			clientManagementServiceDeleteClientHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClientManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClientManagementServiceHandler struct{}

func (UnimplementedClientManagementServiceHandler) RegisterClient(context.Context, *connect.Request[v1.RegisterClientRequest]) (*connect.Response[v1.RegisterClientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.ClientManagementService.RegisterClient is not implemented"))
}

func (UnimplementedClientManagementServiceHandler) GetClient(context.Context, *connect.Request[v1.GetClientRequest]) (*connect.Response[v1.GetClientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.ClientManagementService.GetClient is not implemented"))
}

func (UnimplementedClientManagementServiceHandler) ListClients(context.Context, *connect.Request[v1.ListClientsRequest]) (*connect.Response[v1.ListClientsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.ClientManagementService.ListClients is not implemented"))
}

func (UnimplementedClientManagementServiceHandler) UpdateClient(context.Context, *connect.Request[v1.UpdateClientRequest]) (*connect.Response[v1.UpdateClientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.ClientManagementService.UpdateClient is not implemented"))
}

func (UnimplementedClientManagementServiceHandler) DeleteClient(context.Context, *connect.Request[v1.DeleteClientRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.ClientManagementService.DeleteClient is not implemented"))
}
