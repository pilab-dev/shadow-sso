// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/sso/v1/federation_service.proto

package ssov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pilab-dev/shadow-sso/gen/proto/sso/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// FederationServiceName is the fully-qualified name of the FederationService service.
	FederationServiceName = "sso.v1.FederationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FederationServiceInitiateFederatedLoginProcedure is the fully-qualified name of the
	// FederationService's InitiateFederatedLogin RPC.
	FederationServiceInitiateFederatedLoginProcedure = "/sso.v1.FederationService/InitiateFederatedLogin"
	// FederationServiceHandleFederatedCallbackProcedure is the fully-qualified name of the
	// FederationService's HandleFederatedCallback RPC.
	FederationServiceHandleFederatedCallbackProcedure = "/sso.v1.FederationService/HandleFederatedCallback"
	// FederationServiceListUserFederatedIdentitiesProcedure is the fully-qualified name of the
	// FederationService's ListUserFederatedIdentities RPC.
	FederationServiceListUserFederatedIdentitiesProcedure = "/sso.v1.FederationService/ListUserFederatedIdentities"
	// FederationServiceRemoveUserFederatedIdentityProcedure is the fully-qualified name of the
	// FederationService's RemoveUserFederatedIdentity RPC.
	FederationServiceRemoveUserFederatedIdentityProcedure = "/sso.v1.FederationService/RemoveUserFederatedIdentity"
	// FederationServicePromptMergeFederatedAccountProcedure is the fully-qualified name of the
	// FederationService's PromptMergeFederatedAccount RPC.
	FederationServicePromptMergeFederatedAccountProcedure = "/sso.v1.FederationService/PromptMergeFederatedAccount"
	// FederationServiceConfirmMergeFederatedAccountProcedure is the fully-qualified name of the
	// FederationService's ConfirmMergeFederatedAccount RPC.
	FederationServiceConfirmMergeFederatedAccountProcedure = "/sso.v1.FederationService/ConfirmMergeFederatedAccount"
)

// FederationServiceClient is a client for the sso.v1.FederationService service.
type FederationServiceClient interface {
	// Initiates the federated login flow for a given provider.
	// Returns a URL to redirect the user to for authentication with the external provider.
	// This RPC would typically be called by a backend HTTP handler that then performs the redirect.
	InitiateFederatedLogin(context.Context, *connect.Request[v1.InitiateFederatedLoginRequest]) (*connect.Response[v1.InitiateFederatedLoginResponse], error)
	// Handles the callback from an external identity provider after user authentication.
	// This involves exchanging the authorization code for tokens, fetching user info,
	// and then either logging in an existing linked user, linking to an existing local user,
	// or guiding a new user through account creation/linking.
	// Returns authentication tokens (similar to LoginResponse) if successful.
	// This RPC would typically be called by a backend HTTP handler that receives the actual redirect.
	HandleFederatedCallback(context.Context, *connect.Request[v1.HandleFederatedCallbackRequest]) (*connect.Response[v1.HandleFederatedCallbackResponse], error)
	// Lists all federated identities linked to the currently authenticated user.
	// Requires user authentication.
	ListUserFederatedIdentities(context.Context, *connect.Request[v1.ListUserFederatedIdentitiesRequest]) (*connect.Response[v1.ListUserFederatedIdentitiesResponse], error)
	// Removes a federated identity link for the currently authenticated user.
	// Requires user authentication.
	RemoveUserFederatedIdentity(context.Context, *connect.Request[v1.RemoveUserFederatedIdentityRequest]) (*connect.Response[emptypb.Empty], error)
	// Asks the user if they want to merge the federated account with an existing local account
	// if a local account with the same email (from provider) already exists.
	// This is typically called after HandleFederatedCallback detects such a scenario.
	PromptMergeFederatedAccount(context.Context, *connect.Request[v1.PromptMergeFederatedAccountRequest]) (*connect.Response[v1.PromptMergeFederatedAccountResponse], error)
	// Confirms the merge of a federated account with an existing local account,
	// typically after email verification.
	ConfirmMergeFederatedAccount(context.Context, *connect.Request[v1.ConfirmMergeFederatedAccountRequest]) (*connect.Response[v1.HandleFederatedCallbackResponse], error)
}

// NewFederationServiceClient constructs a client for the sso.v1.FederationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFederationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FederationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &federationServiceClient{
		initiateFederatedLogin: connect.NewClient[v1.InitiateFederatedLoginRequest, v1.InitiateFederatedLoginResponse](
			httpClient,
			baseURL+FederationServiceInitiateFederatedLoginProcedure,
			opts...,
		),
		handleFederatedCallback: connect.NewClient[v1.HandleFederatedCallbackRequest, v1.HandleFederatedCallbackResponse](
			httpClient,
			baseURL+FederationServiceHandleFederatedCallbackProcedure,
			opts...,
		),
		listUserFederatedIdentities: connect.NewClient[v1.ListUserFederatedIdentitiesRequest, v1.ListUserFederatedIdentitiesResponse](
			httpClient,
			baseURL+FederationServiceListUserFederatedIdentitiesProcedure,
			opts...,
		),
		removeUserFederatedIdentity: connect.NewClient[v1.RemoveUserFederatedIdentityRequest, emptypb.Empty](
			httpClient,
			baseURL+FederationServiceRemoveUserFederatedIdentityProcedure,
			opts...,
		),
		promptMergeFederatedAccount: connect.NewClient[v1.PromptMergeFederatedAccountRequest, v1.PromptMergeFederatedAccountResponse](
			httpClient,
			baseURL+FederationServicePromptMergeFederatedAccountProcedure,
			opts...,
		),
		confirmMergeFederatedAccount: connect.NewClient[v1.ConfirmMergeFederatedAccountRequest, v1.HandleFederatedCallbackResponse](
			httpClient,
			baseURL+FederationServiceConfirmMergeFederatedAccountProcedure,
			opts...,
		),
	}
}

// federationServiceClient implements FederationServiceClient.
type federationServiceClient struct {
	initiateFederatedLogin       *connect.Client[v1.InitiateFederatedLoginRequest, v1.InitiateFederatedLoginResponse]
	handleFederatedCallback      *connect.Client[v1.HandleFederatedCallbackRequest, v1.HandleFederatedCallbackResponse]
	listUserFederatedIdentities  *connect.Client[v1.ListUserFederatedIdentitiesRequest, v1.ListUserFederatedIdentitiesResponse]
	removeUserFederatedIdentity  *connect.Client[v1.RemoveUserFederatedIdentityRequest, emptypb.Empty]
	promptMergeFederatedAccount  *connect.Client[v1.PromptMergeFederatedAccountRequest, v1.PromptMergeFederatedAccountResponse]
	confirmMergeFederatedAccount *connect.Client[v1.ConfirmMergeFederatedAccountRequest, v1.HandleFederatedCallbackResponse]
}

// InitiateFederatedLogin calls sso.v1.FederationService.InitiateFederatedLogin.
func (c *federationServiceClient) InitiateFederatedLogin(ctx context.Context, req *connect.Request[v1.InitiateFederatedLoginRequest]) (*connect.Response[v1.InitiateFederatedLoginResponse], error) {
	return c.initiateFederatedLogin.CallUnary(ctx, req)
}

// HandleFederatedCallback calls sso.v1.FederationService.HandleFederatedCallback.
func (c *federationServiceClient) HandleFederatedCallback(ctx context.Context, req *connect.Request[v1.HandleFederatedCallbackRequest]) (*connect.Response[v1.HandleFederatedCallbackResponse], error) {
	return c.handleFederatedCallback.CallUnary(ctx, req)
}

// ListUserFederatedIdentities calls sso.v1.FederationService.ListUserFederatedIdentities.
func (c *federationServiceClient) ListUserFederatedIdentities(ctx context.Context, req *connect.Request[v1.ListUserFederatedIdentitiesRequest]) (*connect.Response[v1.ListUserFederatedIdentitiesResponse], error) {
	return c.listUserFederatedIdentities.CallUnary(ctx, req)
}

// RemoveUserFederatedIdentity calls sso.v1.FederationService.RemoveUserFederatedIdentity.
func (c *federationServiceClient) RemoveUserFederatedIdentity(ctx context.Context, req *connect.Request[v1.RemoveUserFederatedIdentityRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeUserFederatedIdentity.CallUnary(ctx, req)
}

// PromptMergeFederatedAccount calls sso.v1.FederationService.PromptMergeFederatedAccount.
func (c *federationServiceClient) PromptMergeFederatedAccount(ctx context.Context, req *connect.Request[v1.PromptMergeFederatedAccountRequest]) (*connect.Response[v1.PromptMergeFederatedAccountResponse], error) {
	return c.promptMergeFederatedAccount.CallUnary(ctx, req)
}

// ConfirmMergeFederatedAccount calls sso.v1.FederationService.ConfirmMergeFederatedAccount.
func (c *federationServiceClient) ConfirmMergeFederatedAccount(ctx context.Context, req *connect.Request[v1.ConfirmMergeFederatedAccountRequest]) (*connect.Response[v1.HandleFederatedCallbackResponse], error) {
	return c.confirmMergeFederatedAccount.CallUnary(ctx, req)
}

// FederationServiceHandler is an implementation of the sso.v1.FederationService service.
type FederationServiceHandler interface {
	// Initiates the federated login flow for a given provider.
	// Returns a URL to redirect the user to for authentication with the external provider.
	// This RPC would typically be called by a backend HTTP handler that then performs the redirect.
	InitiateFederatedLogin(context.Context, *connect.Request[v1.InitiateFederatedLoginRequest]) (*connect.Response[v1.InitiateFederatedLoginResponse], error)
	// Handles the callback from an external identity provider after user authentication.
	// This involves exchanging the authorization code for tokens, fetching user info,
	// and then either logging in an existing linked user, linking to an existing local user,
	// or guiding a new user through account creation/linking.
	// Returns authentication tokens (similar to LoginResponse) if successful.
	// This RPC would typically be called by a backend HTTP handler that receives the actual redirect.
	HandleFederatedCallback(context.Context, *connect.Request[v1.HandleFederatedCallbackRequest]) (*connect.Response[v1.HandleFederatedCallbackResponse], error)
	// Lists all federated identities linked to the currently authenticated user.
	// Requires user authentication.
	ListUserFederatedIdentities(context.Context, *connect.Request[v1.ListUserFederatedIdentitiesRequest]) (*connect.Response[v1.ListUserFederatedIdentitiesResponse], error)
	// Removes a federated identity link for the currently authenticated user.
	// Requires user authentication.
	RemoveUserFederatedIdentity(context.Context, *connect.Request[v1.RemoveUserFederatedIdentityRequest]) (*connect.Response[emptypb.Empty], error)
	// Asks the user if they want to merge the federated account with an existing local account
	// if a local account with the same email (from provider) already exists.
	// This is typically called after HandleFederatedCallback detects such a scenario.
	PromptMergeFederatedAccount(context.Context, *connect.Request[v1.PromptMergeFederatedAccountRequest]) (*connect.Response[v1.PromptMergeFederatedAccountResponse], error)
	// Confirms the merge of a federated account with an existing local account,
	// typically after email verification.
	ConfirmMergeFederatedAccount(context.Context, *connect.Request[v1.ConfirmMergeFederatedAccountRequest]) (*connect.Response[v1.HandleFederatedCallbackResponse], error)
}

// NewFederationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFederationServiceHandler(svc FederationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	federationServiceInitiateFederatedLoginHandler := connect.NewUnaryHandler(
		FederationServiceInitiateFederatedLoginProcedure,
		svc.InitiateFederatedLogin,
		opts...,
	)
	federationServiceHandleFederatedCallbackHandler := connect.NewUnaryHandler(
		FederationServiceHandleFederatedCallbackProcedure,
		svc.HandleFederatedCallback,
		opts...,
	)
	federationServiceListUserFederatedIdentitiesHandler := connect.NewUnaryHandler(
		FederationServiceListUserFederatedIdentitiesProcedure,
		svc.ListUserFederatedIdentities,
		opts...,
	)
	federationServiceRemoveUserFederatedIdentityHandler := connect.NewUnaryHandler(
		FederationServiceRemoveUserFederatedIdentityProcedure,
		svc.RemoveUserFederatedIdentity,
		opts...,
	)
	federationServicePromptMergeFederatedAccountHandler := connect.NewUnaryHandler(
		FederationServicePromptMergeFederatedAccountProcedure,
		svc.PromptMergeFederatedAccount,
		opts...,
	)
	federationServiceConfirmMergeFederatedAccountHandler := connect.NewUnaryHandler(
		FederationServiceConfirmMergeFederatedAccountProcedure,
		svc.ConfirmMergeFederatedAccount,
		opts...,
	)
	return "/sso.v1.FederationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FederationServiceInitiateFederatedLoginProcedure:
			federationServiceInitiateFederatedLoginHandler.ServeHTTP(w, r)
		case FederationServiceHandleFederatedCallbackProcedure:
			federationServiceHandleFederatedCallbackHandler.ServeHTTP(w, r)
		case FederationServiceListUserFederatedIdentitiesProcedure:
			federationServiceListUserFederatedIdentitiesHandler.ServeHTTP(w, r)
		case FederationServiceRemoveUserFederatedIdentityProcedure:
			federationServiceRemoveUserFederatedIdentityHandler.ServeHTTP(w, r)
		case FederationServicePromptMergeFederatedAccountProcedure:
			federationServicePromptMergeFederatedAccountHandler.ServeHTTP(w, r)
		case FederationServiceConfirmMergeFederatedAccountProcedure:
			federationServiceConfirmMergeFederatedAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFederationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFederationServiceHandler struct{}

func (UnimplementedFederationServiceHandler) InitiateFederatedLogin(context.Context, *connect.Request[v1.InitiateFederatedLoginRequest]) (*connect.Response[v1.InitiateFederatedLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.FederationService.InitiateFederatedLogin is not implemented"))
}

func (UnimplementedFederationServiceHandler) HandleFederatedCallback(context.Context, *connect.Request[v1.HandleFederatedCallbackRequest]) (*connect.Response[v1.HandleFederatedCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.FederationService.HandleFederatedCallback is not implemented"))
}

func (UnimplementedFederationServiceHandler) ListUserFederatedIdentities(context.Context, *connect.Request[v1.ListUserFederatedIdentitiesRequest]) (*connect.Response[v1.ListUserFederatedIdentitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.FederationService.ListUserFederatedIdentities is not implemented"))
}

func (UnimplementedFederationServiceHandler) RemoveUserFederatedIdentity(context.Context, *connect.Request[v1.RemoveUserFederatedIdentityRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.FederationService.RemoveUserFederatedIdentity is not implemented"))
}

func (UnimplementedFederationServiceHandler) PromptMergeFederatedAccount(context.Context, *connect.Request[v1.PromptMergeFederatedAccountRequest]) (*connect.Response[v1.PromptMergeFederatedAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.FederationService.PromptMergeFederatedAccount is not implemented"))
}

func (UnimplementedFederationServiceHandler) ConfirmMergeFederatedAccount(context.Context, *connect.Request[v1.ConfirmMergeFederatedAccountRequest]) (*connect.Response[v1.HandleFederatedCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.FederationService.ConfirmMergeFederatedAccount is not implemented"))
}
