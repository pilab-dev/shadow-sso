// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/sso/v1/two_factor_service.proto

package ssov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pilab-dev/shadow-sso/gen/proto/sso/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TwoFactorServiceName is the fully-qualified name of the TwoFactorService service.
	TwoFactorServiceName = "sso.v1.TwoFactorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TwoFactorServiceInitiateTOTPSetupProcedure is the fully-qualified name of the TwoFactorService's
	// InitiateTOTPSetup RPC.
	TwoFactorServiceInitiateTOTPSetupProcedure = "/sso.v1.TwoFactorService/InitiateTOTPSetup"
	// TwoFactorServiceVerifyAndEnableTOTPProcedure is the fully-qualified name of the
	// TwoFactorService's VerifyAndEnableTOTP RPC.
	TwoFactorServiceVerifyAndEnableTOTPProcedure = "/sso.v1.TwoFactorService/VerifyAndEnableTOTP"
	// TwoFactorServiceDisable2FAProcedure is the fully-qualified name of the TwoFactorService's
	// Disable2FA RPC.
	TwoFactorServiceDisable2FAProcedure = "/sso.v1.TwoFactorService/Disable2FA"
	// TwoFactorServiceGenerateRecoveryCodesProcedure is the fully-qualified name of the
	// TwoFactorService's GenerateRecoveryCodes RPC.
	TwoFactorServiceGenerateRecoveryCodesProcedure = "/sso.v1.TwoFactorService/GenerateRecoveryCodes"
)

// TwoFactorServiceClient is a client for the sso.v1.TwoFactorService service.
type TwoFactorServiceClient interface {
	// Initiates the setup process for TOTP.
	// Generates a new TOTP secret and a corresponding QR code URI for the authenticated user.
	// The user must verify with a TOTP code from their authenticator app to enable 2FA.
	InitiateTOTPSetup(context.Context, *connect.Request[v1.InitiateTOTPSetupRequest]) (*connect.Response[v1.InitiateTOTPSetupResponse], error)
	// Verifies a TOTP code provided by the user during setup and enables 2FA if the code is valid.
	// This should be called after InitiateTOTPSetup.
	// Returns a list of recovery codes upon successful enablement.
	VerifyAndEnableTOTP(context.Context, *connect.Request[v1.VerifyAndEnableTOTPRequest]) (*connect.Response[v1.VerifyAndEnableTOTPResponse], error)
	// Disables 2FA for the authenticated user.
	// May require current password or a 2FA code (if already enabled) for verification.
	Disable2FA(context.Context, *connect.Request[v1.Disable2FARequest]) (*connect.Response[emptypb.Empty], error)
	// Generates a new set of recovery codes for a user who already has 2FA enabled.
	// This invalidates any previously issued recovery codes.
	// Requires the user to be authenticated (e.g., via password or existing 2FA).
	GenerateRecoveryCodes(context.Context, *connect.Request[v1.GenerateRecoveryCodesRequest]) (*connect.Response[v1.GenerateRecoveryCodesResponse], error)
}

// NewTwoFactorServiceClient constructs a client for the sso.v1.TwoFactorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTwoFactorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TwoFactorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &twoFactorServiceClient{
		initiateTOTPSetup: connect.NewClient[v1.InitiateTOTPSetupRequest, v1.InitiateTOTPSetupResponse](
			httpClient,
			baseURL+TwoFactorServiceInitiateTOTPSetupProcedure,
			opts...,
		),
		verifyAndEnableTOTP: connect.NewClient[v1.VerifyAndEnableTOTPRequest, v1.VerifyAndEnableTOTPResponse](
			httpClient,
			baseURL+TwoFactorServiceVerifyAndEnableTOTPProcedure,
			opts...,
		),
		disable2FA: connect.NewClient[v1.Disable2FARequest, emptypb.Empty](
			httpClient,
			baseURL+TwoFactorServiceDisable2FAProcedure,
			opts...,
		),
		generateRecoveryCodes: connect.NewClient[v1.GenerateRecoveryCodesRequest, v1.GenerateRecoveryCodesResponse](
			httpClient,
			baseURL+TwoFactorServiceGenerateRecoveryCodesProcedure,
			opts...,
		),
	}
}

// twoFactorServiceClient implements TwoFactorServiceClient.
type twoFactorServiceClient struct {
	initiateTOTPSetup     *connect.Client[v1.InitiateTOTPSetupRequest, v1.InitiateTOTPSetupResponse]
	verifyAndEnableTOTP   *connect.Client[v1.VerifyAndEnableTOTPRequest, v1.VerifyAndEnableTOTPResponse]
	disable2FA            *connect.Client[v1.Disable2FARequest, emptypb.Empty]
	generateRecoveryCodes *connect.Client[v1.GenerateRecoveryCodesRequest, v1.GenerateRecoveryCodesResponse]
}

// InitiateTOTPSetup calls sso.v1.TwoFactorService.InitiateTOTPSetup.
func (c *twoFactorServiceClient) InitiateTOTPSetup(ctx context.Context, req *connect.Request[v1.InitiateTOTPSetupRequest]) (*connect.Response[v1.InitiateTOTPSetupResponse], error) {
	return c.initiateTOTPSetup.CallUnary(ctx, req)
}

// VerifyAndEnableTOTP calls sso.v1.TwoFactorService.VerifyAndEnableTOTP.
func (c *twoFactorServiceClient) VerifyAndEnableTOTP(ctx context.Context, req *connect.Request[v1.VerifyAndEnableTOTPRequest]) (*connect.Response[v1.VerifyAndEnableTOTPResponse], error) {
	return c.verifyAndEnableTOTP.CallUnary(ctx, req)
}

// Disable2FA calls sso.v1.TwoFactorService.Disable2FA.
func (c *twoFactorServiceClient) Disable2FA(ctx context.Context, req *connect.Request[v1.Disable2FARequest]) (*connect.Response[emptypb.Empty], error) {
	return c.disable2FA.CallUnary(ctx, req)
}

// GenerateRecoveryCodes calls sso.v1.TwoFactorService.GenerateRecoveryCodes.
func (c *twoFactorServiceClient) GenerateRecoveryCodes(ctx context.Context, req *connect.Request[v1.GenerateRecoveryCodesRequest]) (*connect.Response[v1.GenerateRecoveryCodesResponse], error) {
	return c.generateRecoveryCodes.CallUnary(ctx, req)
}

// TwoFactorServiceHandler is an implementation of the sso.v1.TwoFactorService service.
type TwoFactorServiceHandler interface {
	// Initiates the setup process for TOTP.
	// Generates a new TOTP secret and a corresponding QR code URI for the authenticated user.
	// The user must verify with a TOTP code from their authenticator app to enable 2FA.
	InitiateTOTPSetup(context.Context, *connect.Request[v1.InitiateTOTPSetupRequest]) (*connect.Response[v1.InitiateTOTPSetupResponse], error)
	// Verifies a TOTP code provided by the user during setup and enables 2FA if the code is valid.
	// This should be called after InitiateTOTPSetup.
	// Returns a list of recovery codes upon successful enablement.
	VerifyAndEnableTOTP(context.Context, *connect.Request[v1.VerifyAndEnableTOTPRequest]) (*connect.Response[v1.VerifyAndEnableTOTPResponse], error)
	// Disables 2FA for the authenticated user.
	// May require current password or a 2FA code (if already enabled) for verification.
	Disable2FA(context.Context, *connect.Request[v1.Disable2FARequest]) (*connect.Response[emptypb.Empty], error)
	// Generates a new set of recovery codes for a user who already has 2FA enabled.
	// This invalidates any previously issued recovery codes.
	// Requires the user to be authenticated (e.g., via password or existing 2FA).
	GenerateRecoveryCodes(context.Context, *connect.Request[v1.GenerateRecoveryCodesRequest]) (*connect.Response[v1.GenerateRecoveryCodesResponse], error)
}

// NewTwoFactorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTwoFactorServiceHandler(svc TwoFactorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	twoFactorServiceInitiateTOTPSetupHandler := connect.NewUnaryHandler(
		TwoFactorServiceInitiateTOTPSetupProcedure,
		svc.InitiateTOTPSetup,
		opts...,
	)
	twoFactorServiceVerifyAndEnableTOTPHandler := connect.NewUnaryHandler(
		TwoFactorServiceVerifyAndEnableTOTPProcedure,
		svc.VerifyAndEnableTOTP,
		opts...,
	)
	twoFactorServiceDisable2FAHandler := connect.NewUnaryHandler(
		TwoFactorServiceDisable2FAProcedure,
		svc.Disable2FA,
		opts...,
	)
	twoFactorServiceGenerateRecoveryCodesHandler := connect.NewUnaryHandler(
		TwoFactorServiceGenerateRecoveryCodesProcedure,
		svc.GenerateRecoveryCodes,
		opts...,
	)
	return "/sso.v1.TwoFactorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TwoFactorServiceInitiateTOTPSetupProcedure:
			twoFactorServiceInitiateTOTPSetupHandler.ServeHTTP(w, r)
		case TwoFactorServiceVerifyAndEnableTOTPProcedure:
			twoFactorServiceVerifyAndEnableTOTPHandler.ServeHTTP(w, r)
		case TwoFactorServiceDisable2FAProcedure:
			twoFactorServiceDisable2FAHandler.ServeHTTP(w, r)
		case TwoFactorServiceGenerateRecoveryCodesProcedure:
			twoFactorServiceGenerateRecoveryCodesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTwoFactorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTwoFactorServiceHandler struct{}

func (UnimplementedTwoFactorServiceHandler) InitiateTOTPSetup(context.Context, *connect.Request[v1.InitiateTOTPSetupRequest]) (*connect.Response[v1.InitiateTOTPSetupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.TwoFactorService.InitiateTOTPSetup is not implemented"))
}

func (UnimplementedTwoFactorServiceHandler) VerifyAndEnableTOTP(context.Context, *connect.Request[v1.VerifyAndEnableTOTPRequest]) (*connect.Response[v1.VerifyAndEnableTOTPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.TwoFactorService.VerifyAndEnableTOTP is not implemented"))
}

func (UnimplementedTwoFactorServiceHandler) Disable2FA(context.Context, *connect.Request[v1.Disable2FARequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.TwoFactorService.Disable2FA is not implemented"))
}

func (UnimplementedTwoFactorServiceHandler) GenerateRecoveryCodes(context.Context, *connect.Request[v1.GenerateRecoveryCodesRequest]) (*connect.Response[v1.GenerateRecoveryCodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sso.v1.TwoFactorService.GenerateRecoveryCodes is not implemented"))
}
