// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/dts/v1/dts.proto

package dtsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pilab-dev/shadow-sso/gen/proto/dts/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TokenStoreServiceName is the fully-qualified name of the TokenStoreService service.
	TokenStoreServiceName = "dts.v1.TokenStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokenStoreServiceSetProcedure is the fully-qualified name of the TokenStoreService's Set RPC.
	TokenStoreServiceSetProcedure = "/dts.v1.TokenStoreService/Set"
	// TokenStoreServiceGetProcedure is the fully-qualified name of the TokenStoreService's Get RPC.
	TokenStoreServiceGetProcedure = "/dts.v1.TokenStoreService/Get"
	// TokenStoreServiceDeleteProcedure is the fully-qualified name of the TokenStoreService's Delete
	// RPC.
	TokenStoreServiceDeleteProcedure = "/dts.v1.TokenStoreService/Delete"
	// TokenStoreServiceStoreAuthCodeProcedure is the fully-qualified name of the TokenStoreService's
	// StoreAuthCode RPC.
	TokenStoreServiceStoreAuthCodeProcedure = "/dts.v1.TokenStoreService/StoreAuthCode"
	// TokenStoreServiceGetAuthCodeProcedure is the fully-qualified name of the TokenStoreService's
	// GetAuthCode RPC.
	TokenStoreServiceGetAuthCodeProcedure = "/dts.v1.TokenStoreService/GetAuthCode"
	// TokenStoreServiceDeleteAuthCodeProcedure is the fully-qualified name of the TokenStoreService's
	// DeleteAuthCode RPC.
	TokenStoreServiceDeleteAuthCodeProcedure = "/dts.v1.TokenStoreService/DeleteAuthCode"
	// TokenStoreServiceStoreRefreshTokenProcedure is the fully-qualified name of the
	// TokenStoreService's StoreRefreshToken RPC.
	TokenStoreServiceStoreRefreshTokenProcedure = "/dts.v1.TokenStoreService/StoreRefreshToken"
	// TokenStoreServiceGetRefreshTokenProcedure is the fully-qualified name of the TokenStoreService's
	// GetRefreshToken RPC.
	TokenStoreServiceGetRefreshTokenProcedure = "/dts.v1.TokenStoreService/GetRefreshToken"
	// TokenStoreServiceDeleteRefreshTokenProcedure is the fully-qualified name of the
	// TokenStoreService's DeleteRefreshToken RPC.
	TokenStoreServiceDeleteRefreshTokenProcedure = "/dts.v1.TokenStoreService/DeleteRefreshToken"
	// TokenStoreServiceStoreAccessTokenMetadataProcedure is the fully-qualified name of the
	// TokenStoreService's StoreAccessTokenMetadata RPC.
	TokenStoreServiceStoreAccessTokenMetadataProcedure = "/dts.v1.TokenStoreService/StoreAccessTokenMetadata"
	// TokenStoreServiceGetAccessTokenMetadataProcedure is the fully-qualified name of the
	// TokenStoreService's GetAccessTokenMetadata RPC.
	TokenStoreServiceGetAccessTokenMetadataProcedure = "/dts.v1.TokenStoreService/GetAccessTokenMetadata"
	// TokenStoreServiceDeleteAccessTokenMetadataProcedure is the fully-qualified name of the
	// TokenStoreService's DeleteAccessTokenMetadata RPC.
	TokenStoreServiceDeleteAccessTokenMetadataProcedure = "/dts.v1.TokenStoreService/DeleteAccessTokenMetadata"
	// TokenStoreServiceStoreOIDCFlwProcedure is the fully-qualified name of the TokenStoreService's
	// StoreOIDCFlw RPC.
	TokenStoreServiceStoreOIDCFlwProcedure = "/dts.v1.TokenStoreService/StoreOIDCFlw"
	// TokenStoreServiceGetOIDCFlwProcedure is the fully-qualified name of the TokenStoreService's
	// GetOIDCFlw RPC.
	TokenStoreServiceGetOIDCFlwProcedure = "/dts.v1.TokenStoreService/GetOIDCFlw"
	// TokenStoreServiceDeleteOIDCFlwProcedure is the fully-qualified name of the TokenStoreService's
	// DeleteOIDCFlw RPC.
	TokenStoreServiceDeleteOIDCFlwProcedure = "/dts.v1.TokenStoreService/DeleteOIDCFlw"
	// TokenStoreServiceUpdateOIDCFlwProcedure is the fully-qualified name of the TokenStoreService's
	// UpdateOIDCFlw RPC.
	TokenStoreServiceUpdateOIDCFlwProcedure = "/dts.v1.TokenStoreService/UpdateOIDCFlw"
	// TokenStoreServiceStoreUserSessionProcedure is the fully-qualified name of the TokenStoreService's
	// StoreUserSession RPC.
	TokenStoreServiceStoreUserSessionProcedure = "/dts.v1.TokenStoreService/StoreUserSession"
	// TokenStoreServiceGetUserSessionProcedure is the fully-qualified name of the TokenStoreService's
	// GetUserSession RPC.
	TokenStoreServiceGetUserSessionProcedure = "/dts.v1.TokenStoreService/GetUserSession"
	// TokenStoreServiceDeleteUserSessionProcedure is the fully-qualified name of the
	// TokenStoreService's DeleteUserSession RPC.
	TokenStoreServiceDeleteUserSessionProcedure = "/dts.v1.TokenStoreService/DeleteUserSession"
	// TokenStoreServiceStoreDeviceAuthProcedure is the fully-qualified name of the TokenStoreService's
	// StoreDeviceAuth RPC.
	TokenStoreServiceStoreDeviceAuthProcedure = "/dts.v1.TokenStoreService/StoreDeviceAuth"
	// TokenStoreServiceGetDeviceAuthByDeviceCodeProcedure is the fully-qualified name of the
	// TokenStoreService's GetDeviceAuthByDeviceCode RPC.
	TokenStoreServiceGetDeviceAuthByDeviceCodeProcedure = "/dts.v1.TokenStoreService/GetDeviceAuthByDeviceCode"
	// TokenStoreServiceGetDeviceAuthByUserCodeProcedure is the fully-qualified name of the
	// TokenStoreService's GetDeviceAuthByUserCode RPC.
	TokenStoreServiceGetDeviceAuthByUserCodeProcedure = "/dts.v1.TokenStoreService/GetDeviceAuthByUserCode"
	// TokenStoreServiceUpdateDeviceAuthProcedure is the fully-qualified name of the TokenStoreService's
	// UpdateDeviceAuth RPC.
	TokenStoreServiceUpdateDeviceAuthProcedure = "/dts.v1.TokenStoreService/UpdateDeviceAuth"
	// TokenStoreServiceDeleteDeviceAuthProcedure is the fully-qualified name of the TokenStoreService's
	// DeleteDeviceAuth RPC.
	TokenStoreServiceDeleteDeviceAuthProcedure = "/dts.v1.TokenStoreService/DeleteDeviceAuth"
	// TokenStoreServiceStorePKCEStateProcedure is the fully-qualified name of the TokenStoreService's
	// StorePKCEState RPC.
	TokenStoreServiceStorePKCEStateProcedure = "/dts.v1.TokenStoreService/StorePKCEState"
	// TokenStoreServiceGetPKCEStateProcedure is the fully-qualified name of the TokenStoreService's
	// GetPKCEState RPC.
	TokenStoreServiceGetPKCEStateProcedure = "/dts.v1.TokenStoreService/GetPKCEState"
	// TokenStoreServiceDeletePKCEStateProcedure is the fully-qualified name of the TokenStoreService's
	// DeletePKCEState RPC.
	TokenStoreServiceDeletePKCEStateProcedure = "/dts.v1.TokenStoreService/DeletePKCEState"
)

// TokenStoreServiceClient is a client for the dts.v1.TokenStoreService service.
type TokenStoreServiceClient interface {
	// Generic Key-Value operations
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[emptypb.Empty], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[emptypb.Empty], error)
	// --- Authorization Codes ---
	StoreAuthCode(context.Context, *connect.Request[v1.StoreAuthCodeRequest]) (*connect.Response[emptypb.Empty], error)
	GetAuthCode(context.Context, *connect.Request[v1.GetAuthCodeRequest]) (*connect.Response[v1.AuthCode], error)
	DeleteAuthCode(context.Context, *connect.Request[v1.DeleteAuthCodeRequest]) (*connect.Response[emptypb.Empty], error)
	// --- Refresh Tokens ---
	StoreRefreshToken(context.Context, *connect.Request[v1.StoreRefreshTokenRequest]) (*connect.Response[emptypb.Empty], error)
	GetRefreshToken(context.Context, *connect.Request[v1.GetRefreshTokenRequest]) (*connect.Response[v1.RefreshToken], error)
	DeleteRefreshToken(context.Context, *connect.Request[v1.DeleteRefreshTokenRequest]) (*connect.Response[emptypb.Empty], error)
	// --- Access Tokens Metadata ---
	StoreAccessTokenMetadata(context.Context, *connect.Request[v1.StoreAccessTokenMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	GetAccessTokenMetadata(context.Context, *connect.Request[v1.GetAccessTokenMetadataRequest]) (*connect.Response[v1.AccessTokenMetadata], error)
	DeleteAccessTokenMetadata(context.Context, *connect.Request[v1.DeleteAccessTokenMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	// --- OIDC Flows ---
	StoreOIDCFlw(context.Context, *connect.Request[v1.StoreOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error)
	GetOIDCFlw(context.Context, *connect.Request[v1.GetOIDCFlwRequest]) (*connect.Response[v1.OIDCFlw], error)
	DeleteOIDCFlw(context.Context, *connect.Request[v1.DeleteOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateOIDCFlw(context.Context, *connect.Request[v1.UpdateOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error)
	// --- OIDC User Sessions ---
	StoreUserSession(context.Context, *connect.Request[v1.StoreUserSessionRequest]) (*connect.Response[emptypb.Empty], error)
	GetUserSession(context.Context, *connect.Request[v1.GetUserSessionRequest]) (*connect.Response[v1.UserSession], error)
	DeleteUserSession(context.Context, *connect.Request[v1.DeleteUserSessionRequest]) (*connect.Response[emptypb.Empty], error)
	// --- Device Authorization Grants & Codes ---
	StoreDeviceAuth(context.Context, *connect.Request[v1.StoreDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error)
	GetDeviceAuthByDeviceCode(context.Context, *connect.Request[v1.GetDeviceAuthByDeviceCodeRequest]) (*connect.Response[v1.DeviceAuth], error)
	GetDeviceAuthByUserCode(context.Context, *connect.Request[v1.GetDeviceAuthByUserCodeRequest]) (*connect.Response[v1.DeviceAuth], error)
	UpdateDeviceAuth(context.Context, *connect.Request[v1.UpdateDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteDeviceAuth(context.Context, *connect.Request[v1.DeleteDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error)
	// --- PKCE States ---
	StorePKCEState(context.Context, *connect.Request[v1.StorePKCEStateRequest]) (*connect.Response[emptypb.Empty], error)
	GetPKCEState(context.Context, *connect.Request[v1.GetPKCEStateRequest]) (*connect.Response[v1.PKCEState], error)
	DeletePKCEState(context.Context, *connect.Request[v1.DeletePKCEStateRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewTokenStoreServiceClient constructs a client for the dts.v1.TokenStoreService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokenStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TokenStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tokenStoreServiceClient{
		set: connect.NewClient[v1.SetRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceSetProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+TokenStoreServiceGetProcedure,
			opts...,
		),
		delete: connect.NewClient[v1.DeleteRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceDeleteProcedure,
			opts...,
		),
		storeAuthCode: connect.NewClient[v1.StoreAuthCodeRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceStoreAuthCodeProcedure,
			opts...,
		),
		getAuthCode: connect.NewClient[v1.GetAuthCodeRequest, v1.AuthCode](
			httpClient,
			baseURL+TokenStoreServiceGetAuthCodeProcedure,
			opts...,
		),
		deleteAuthCode: connect.NewClient[v1.DeleteAuthCodeRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceDeleteAuthCodeProcedure,
			opts...,
		),
		storeRefreshToken: connect.NewClient[v1.StoreRefreshTokenRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceStoreRefreshTokenProcedure,
			opts...,
		),
		getRefreshToken: connect.NewClient[v1.GetRefreshTokenRequest, v1.RefreshToken](
			httpClient,
			baseURL+TokenStoreServiceGetRefreshTokenProcedure,
			opts...,
		),
		deleteRefreshToken: connect.NewClient[v1.DeleteRefreshTokenRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceDeleteRefreshTokenProcedure,
			opts...,
		),
		storeAccessTokenMetadata: connect.NewClient[v1.StoreAccessTokenMetadataRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceStoreAccessTokenMetadataProcedure,
			opts...,
		),
		getAccessTokenMetadata: connect.NewClient[v1.GetAccessTokenMetadataRequest, v1.AccessTokenMetadata](
			httpClient,
			baseURL+TokenStoreServiceGetAccessTokenMetadataProcedure,
			opts...,
		),
		deleteAccessTokenMetadata: connect.NewClient[v1.DeleteAccessTokenMetadataRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceDeleteAccessTokenMetadataProcedure,
			opts...,
		),
		storeOIDCFlw: connect.NewClient[v1.StoreOIDCFlwRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceStoreOIDCFlwProcedure,
			opts...,
		),
		getOIDCFlw: connect.NewClient[v1.GetOIDCFlwRequest, v1.OIDCFlw](
			httpClient,
			baseURL+TokenStoreServiceGetOIDCFlwProcedure,
			opts...,
		),
		deleteOIDCFlw: connect.NewClient[v1.DeleteOIDCFlwRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceDeleteOIDCFlwProcedure,
			opts...,
		),
		updateOIDCFlw: connect.NewClient[v1.UpdateOIDCFlwRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceUpdateOIDCFlwProcedure,
			opts...,
		),
		storeUserSession: connect.NewClient[v1.StoreUserSessionRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceStoreUserSessionProcedure,
			opts...,
		),
		getUserSession: connect.NewClient[v1.GetUserSessionRequest, v1.UserSession](
			httpClient,
			baseURL+TokenStoreServiceGetUserSessionProcedure,
			opts...,
		),
		deleteUserSession: connect.NewClient[v1.DeleteUserSessionRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceDeleteUserSessionProcedure,
			opts...,
		),
		storeDeviceAuth: connect.NewClient[v1.StoreDeviceAuthRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceStoreDeviceAuthProcedure,
			opts...,
		),
		getDeviceAuthByDeviceCode: connect.NewClient[v1.GetDeviceAuthByDeviceCodeRequest, v1.DeviceAuth](
			httpClient,
			baseURL+TokenStoreServiceGetDeviceAuthByDeviceCodeProcedure,
			opts...,
		),
		getDeviceAuthByUserCode: connect.NewClient[v1.GetDeviceAuthByUserCodeRequest, v1.DeviceAuth](
			httpClient,
			baseURL+TokenStoreServiceGetDeviceAuthByUserCodeProcedure,
			opts...,
		),
		updateDeviceAuth: connect.NewClient[v1.UpdateDeviceAuthRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceUpdateDeviceAuthProcedure,
			opts...,
		),
		deleteDeviceAuth: connect.NewClient[v1.DeleteDeviceAuthRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceDeleteDeviceAuthProcedure,
			opts...,
		),
		storePKCEState: connect.NewClient[v1.StorePKCEStateRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceStorePKCEStateProcedure,
			opts...,
		),
		getPKCEState: connect.NewClient[v1.GetPKCEStateRequest, v1.PKCEState](
			httpClient,
			baseURL+TokenStoreServiceGetPKCEStateProcedure,
			opts...,
		),
		deletePKCEState: connect.NewClient[v1.DeletePKCEStateRequest, emptypb.Empty](
			httpClient,
			baseURL+TokenStoreServiceDeletePKCEStateProcedure,
			opts...,
		),
	}
}

// tokenStoreServiceClient implements TokenStoreServiceClient.
type tokenStoreServiceClient struct {
	set                       *connect.Client[v1.SetRequest, emptypb.Empty]
	get                       *connect.Client[v1.GetRequest, v1.GetResponse]
	delete                    *connect.Client[v1.DeleteRequest, emptypb.Empty]
	storeAuthCode             *connect.Client[v1.StoreAuthCodeRequest, emptypb.Empty]
	getAuthCode               *connect.Client[v1.GetAuthCodeRequest, v1.AuthCode]
	deleteAuthCode            *connect.Client[v1.DeleteAuthCodeRequest, emptypb.Empty]
	storeRefreshToken         *connect.Client[v1.StoreRefreshTokenRequest, emptypb.Empty]
	getRefreshToken           *connect.Client[v1.GetRefreshTokenRequest, v1.RefreshToken]
	deleteRefreshToken        *connect.Client[v1.DeleteRefreshTokenRequest, emptypb.Empty]
	storeAccessTokenMetadata  *connect.Client[v1.StoreAccessTokenMetadataRequest, emptypb.Empty]
	getAccessTokenMetadata    *connect.Client[v1.GetAccessTokenMetadataRequest, v1.AccessTokenMetadata]
	deleteAccessTokenMetadata *connect.Client[v1.DeleteAccessTokenMetadataRequest, emptypb.Empty]
	storeOIDCFlw              *connect.Client[v1.StoreOIDCFlwRequest, emptypb.Empty]
	getOIDCFlw                *connect.Client[v1.GetOIDCFlwRequest, v1.OIDCFlw]
	deleteOIDCFlw             *connect.Client[v1.DeleteOIDCFlwRequest, emptypb.Empty]
	updateOIDCFlw             *connect.Client[v1.UpdateOIDCFlwRequest, emptypb.Empty]
	storeUserSession          *connect.Client[v1.StoreUserSessionRequest, emptypb.Empty]
	getUserSession            *connect.Client[v1.GetUserSessionRequest, v1.UserSession]
	deleteUserSession         *connect.Client[v1.DeleteUserSessionRequest, emptypb.Empty]
	storeDeviceAuth           *connect.Client[v1.StoreDeviceAuthRequest, emptypb.Empty]
	getDeviceAuthByDeviceCode *connect.Client[v1.GetDeviceAuthByDeviceCodeRequest, v1.DeviceAuth]
	getDeviceAuthByUserCode   *connect.Client[v1.GetDeviceAuthByUserCodeRequest, v1.DeviceAuth]
	updateDeviceAuth          *connect.Client[v1.UpdateDeviceAuthRequest, emptypb.Empty]
	deleteDeviceAuth          *connect.Client[v1.DeleteDeviceAuthRequest, emptypb.Empty]
	storePKCEState            *connect.Client[v1.StorePKCEStateRequest, emptypb.Empty]
	getPKCEState              *connect.Client[v1.GetPKCEStateRequest, v1.PKCEState]
	deletePKCEState           *connect.Client[v1.DeletePKCEStateRequest, emptypb.Empty]
}

// Set calls dts.v1.TokenStoreService.Set.
func (c *tokenStoreServiceClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.set.CallUnary(ctx, req)
}

// Get calls dts.v1.TokenStoreService.Get.
func (c *tokenStoreServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls dts.v1.TokenStoreService.Delete.
func (c *tokenStoreServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// StoreAuthCode calls dts.v1.TokenStoreService.StoreAuthCode.
func (c *tokenStoreServiceClient) StoreAuthCode(ctx context.Context, req *connect.Request[v1.StoreAuthCodeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.storeAuthCode.CallUnary(ctx, req)
}

// GetAuthCode calls dts.v1.TokenStoreService.GetAuthCode.
func (c *tokenStoreServiceClient) GetAuthCode(ctx context.Context, req *connect.Request[v1.GetAuthCodeRequest]) (*connect.Response[v1.AuthCode], error) {
	return c.getAuthCode.CallUnary(ctx, req)
}

// DeleteAuthCode calls dts.v1.TokenStoreService.DeleteAuthCode.
func (c *tokenStoreServiceClient) DeleteAuthCode(ctx context.Context, req *connect.Request[v1.DeleteAuthCodeRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteAuthCode.CallUnary(ctx, req)
}

// StoreRefreshToken calls dts.v1.TokenStoreService.StoreRefreshToken.
func (c *tokenStoreServiceClient) StoreRefreshToken(ctx context.Context, req *connect.Request[v1.StoreRefreshTokenRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.storeRefreshToken.CallUnary(ctx, req)
}

// GetRefreshToken calls dts.v1.TokenStoreService.GetRefreshToken.
func (c *tokenStoreServiceClient) GetRefreshToken(ctx context.Context, req *connect.Request[v1.GetRefreshTokenRequest]) (*connect.Response[v1.RefreshToken], error) {
	return c.getRefreshToken.CallUnary(ctx, req)
}

// DeleteRefreshToken calls dts.v1.TokenStoreService.DeleteRefreshToken.
func (c *tokenStoreServiceClient) DeleteRefreshToken(ctx context.Context, req *connect.Request[v1.DeleteRefreshTokenRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRefreshToken.CallUnary(ctx, req)
}

// StoreAccessTokenMetadata calls dts.v1.TokenStoreService.StoreAccessTokenMetadata.
func (c *tokenStoreServiceClient) StoreAccessTokenMetadata(ctx context.Context, req *connect.Request[v1.StoreAccessTokenMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.storeAccessTokenMetadata.CallUnary(ctx, req)
}

// GetAccessTokenMetadata calls dts.v1.TokenStoreService.GetAccessTokenMetadata.
func (c *tokenStoreServiceClient) GetAccessTokenMetadata(ctx context.Context, req *connect.Request[v1.GetAccessTokenMetadataRequest]) (*connect.Response[v1.AccessTokenMetadata], error) {
	return c.getAccessTokenMetadata.CallUnary(ctx, req)
}

// DeleteAccessTokenMetadata calls dts.v1.TokenStoreService.DeleteAccessTokenMetadata.
func (c *tokenStoreServiceClient) DeleteAccessTokenMetadata(ctx context.Context, req *connect.Request[v1.DeleteAccessTokenMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteAccessTokenMetadata.CallUnary(ctx, req)
}

// StoreOIDCFlw calls dts.v1.TokenStoreService.StoreOIDCFlw.
func (c *tokenStoreServiceClient) StoreOIDCFlw(ctx context.Context, req *connect.Request[v1.StoreOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.storeOIDCFlw.CallUnary(ctx, req)
}

// GetOIDCFlw calls dts.v1.TokenStoreService.GetOIDCFlw.
func (c *tokenStoreServiceClient) GetOIDCFlw(ctx context.Context, req *connect.Request[v1.GetOIDCFlwRequest]) (*connect.Response[v1.OIDCFlw], error) {
	return c.getOIDCFlw.CallUnary(ctx, req)
}

// DeleteOIDCFlw calls dts.v1.TokenStoreService.DeleteOIDCFlw.
func (c *tokenStoreServiceClient) DeleteOIDCFlw(ctx context.Context, req *connect.Request[v1.DeleteOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteOIDCFlw.CallUnary(ctx, req)
}

// UpdateOIDCFlw calls dts.v1.TokenStoreService.UpdateOIDCFlw.
func (c *tokenStoreServiceClient) UpdateOIDCFlw(ctx context.Context, req *connect.Request[v1.UpdateOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateOIDCFlw.CallUnary(ctx, req)
}

// StoreUserSession calls dts.v1.TokenStoreService.StoreUserSession.
func (c *tokenStoreServiceClient) StoreUserSession(ctx context.Context, req *connect.Request[v1.StoreUserSessionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.storeUserSession.CallUnary(ctx, req)
}

// GetUserSession calls dts.v1.TokenStoreService.GetUserSession.
func (c *tokenStoreServiceClient) GetUserSession(ctx context.Context, req *connect.Request[v1.GetUserSessionRequest]) (*connect.Response[v1.UserSession], error) {
	return c.getUserSession.CallUnary(ctx, req)
}

// DeleteUserSession calls dts.v1.TokenStoreService.DeleteUserSession.
func (c *tokenStoreServiceClient) DeleteUserSession(ctx context.Context, req *connect.Request[v1.DeleteUserSessionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteUserSession.CallUnary(ctx, req)
}

// StoreDeviceAuth calls dts.v1.TokenStoreService.StoreDeviceAuth.
func (c *tokenStoreServiceClient) StoreDeviceAuth(ctx context.Context, req *connect.Request[v1.StoreDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.storeDeviceAuth.CallUnary(ctx, req)
}

// GetDeviceAuthByDeviceCode calls dts.v1.TokenStoreService.GetDeviceAuthByDeviceCode.
func (c *tokenStoreServiceClient) GetDeviceAuthByDeviceCode(ctx context.Context, req *connect.Request[v1.GetDeviceAuthByDeviceCodeRequest]) (*connect.Response[v1.DeviceAuth], error) {
	return c.getDeviceAuthByDeviceCode.CallUnary(ctx, req)
}

// GetDeviceAuthByUserCode calls dts.v1.TokenStoreService.GetDeviceAuthByUserCode.
func (c *tokenStoreServiceClient) GetDeviceAuthByUserCode(ctx context.Context, req *connect.Request[v1.GetDeviceAuthByUserCodeRequest]) (*connect.Response[v1.DeviceAuth], error) {
	return c.getDeviceAuthByUserCode.CallUnary(ctx, req)
}

// UpdateDeviceAuth calls dts.v1.TokenStoreService.UpdateDeviceAuth.
func (c *tokenStoreServiceClient) UpdateDeviceAuth(ctx context.Context, req *connect.Request[v1.UpdateDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateDeviceAuth.CallUnary(ctx, req)
}

// DeleteDeviceAuth calls dts.v1.TokenStoreService.DeleteDeviceAuth.
func (c *tokenStoreServiceClient) DeleteDeviceAuth(ctx context.Context, req *connect.Request[v1.DeleteDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDeviceAuth.CallUnary(ctx, req)
}

// StorePKCEState calls dts.v1.TokenStoreService.StorePKCEState.
func (c *tokenStoreServiceClient) StorePKCEState(ctx context.Context, req *connect.Request[v1.StorePKCEStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.storePKCEState.CallUnary(ctx, req)
}

// GetPKCEState calls dts.v1.TokenStoreService.GetPKCEState.
func (c *tokenStoreServiceClient) GetPKCEState(ctx context.Context, req *connect.Request[v1.GetPKCEStateRequest]) (*connect.Response[v1.PKCEState], error) {
	return c.getPKCEState.CallUnary(ctx, req)
}

// DeletePKCEState calls dts.v1.TokenStoreService.DeletePKCEState.
func (c *tokenStoreServiceClient) DeletePKCEState(ctx context.Context, req *connect.Request[v1.DeletePKCEStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deletePKCEState.CallUnary(ctx, req)
}

// TokenStoreServiceHandler is an implementation of the dts.v1.TokenStoreService service.
type TokenStoreServiceHandler interface {
	// Generic Key-Value operations
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[emptypb.Empty], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[emptypb.Empty], error)
	// --- Authorization Codes ---
	StoreAuthCode(context.Context, *connect.Request[v1.StoreAuthCodeRequest]) (*connect.Response[emptypb.Empty], error)
	GetAuthCode(context.Context, *connect.Request[v1.GetAuthCodeRequest]) (*connect.Response[v1.AuthCode], error)
	DeleteAuthCode(context.Context, *connect.Request[v1.DeleteAuthCodeRequest]) (*connect.Response[emptypb.Empty], error)
	// --- Refresh Tokens ---
	StoreRefreshToken(context.Context, *connect.Request[v1.StoreRefreshTokenRequest]) (*connect.Response[emptypb.Empty], error)
	GetRefreshToken(context.Context, *connect.Request[v1.GetRefreshTokenRequest]) (*connect.Response[v1.RefreshToken], error)
	DeleteRefreshToken(context.Context, *connect.Request[v1.DeleteRefreshTokenRequest]) (*connect.Response[emptypb.Empty], error)
	// --- Access Tokens Metadata ---
	StoreAccessTokenMetadata(context.Context, *connect.Request[v1.StoreAccessTokenMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	GetAccessTokenMetadata(context.Context, *connect.Request[v1.GetAccessTokenMetadataRequest]) (*connect.Response[v1.AccessTokenMetadata], error)
	DeleteAccessTokenMetadata(context.Context, *connect.Request[v1.DeleteAccessTokenMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	// --- OIDC Flows ---
	StoreOIDCFlw(context.Context, *connect.Request[v1.StoreOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error)
	GetOIDCFlw(context.Context, *connect.Request[v1.GetOIDCFlwRequest]) (*connect.Response[v1.OIDCFlw], error)
	DeleteOIDCFlw(context.Context, *connect.Request[v1.DeleteOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error)
	UpdateOIDCFlw(context.Context, *connect.Request[v1.UpdateOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error)
	// --- OIDC User Sessions ---
	StoreUserSession(context.Context, *connect.Request[v1.StoreUserSessionRequest]) (*connect.Response[emptypb.Empty], error)
	GetUserSession(context.Context, *connect.Request[v1.GetUserSessionRequest]) (*connect.Response[v1.UserSession], error)
	DeleteUserSession(context.Context, *connect.Request[v1.DeleteUserSessionRequest]) (*connect.Response[emptypb.Empty], error)
	// --- Device Authorization Grants & Codes ---
	StoreDeviceAuth(context.Context, *connect.Request[v1.StoreDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error)
	GetDeviceAuthByDeviceCode(context.Context, *connect.Request[v1.GetDeviceAuthByDeviceCodeRequest]) (*connect.Response[v1.DeviceAuth], error)
	GetDeviceAuthByUserCode(context.Context, *connect.Request[v1.GetDeviceAuthByUserCodeRequest]) (*connect.Response[v1.DeviceAuth], error)
	UpdateDeviceAuth(context.Context, *connect.Request[v1.UpdateDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error)
	DeleteDeviceAuth(context.Context, *connect.Request[v1.DeleteDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error)
	// --- PKCE States ---
	StorePKCEState(context.Context, *connect.Request[v1.StorePKCEStateRequest]) (*connect.Response[emptypb.Empty], error)
	GetPKCEState(context.Context, *connect.Request[v1.GetPKCEStateRequest]) (*connect.Response[v1.PKCEState], error)
	DeletePKCEState(context.Context, *connect.Request[v1.DeletePKCEStateRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewTokenStoreServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokenStoreServiceHandler(svc TokenStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tokenStoreServiceSetHandler := connect.NewUnaryHandler(
		TokenStoreServiceSetProcedure,
		svc.Set,
		opts...,
	)
	tokenStoreServiceGetHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetProcedure,
		svc.Get,
		opts...,
	)
	tokenStoreServiceDeleteHandler := connect.NewUnaryHandler(
		TokenStoreServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	tokenStoreServiceStoreAuthCodeHandler := connect.NewUnaryHandler(
		TokenStoreServiceStoreAuthCodeProcedure,
		svc.StoreAuthCode,
		opts...,
	)
	tokenStoreServiceGetAuthCodeHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetAuthCodeProcedure,
		svc.GetAuthCode,
		opts...,
	)
	tokenStoreServiceDeleteAuthCodeHandler := connect.NewUnaryHandler(
		TokenStoreServiceDeleteAuthCodeProcedure,
		svc.DeleteAuthCode,
		opts...,
	)
	tokenStoreServiceStoreRefreshTokenHandler := connect.NewUnaryHandler(
		TokenStoreServiceStoreRefreshTokenProcedure,
		svc.StoreRefreshToken,
		opts...,
	)
	tokenStoreServiceGetRefreshTokenHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetRefreshTokenProcedure,
		svc.GetRefreshToken,
		opts...,
	)
	tokenStoreServiceDeleteRefreshTokenHandler := connect.NewUnaryHandler(
		TokenStoreServiceDeleteRefreshTokenProcedure,
		svc.DeleteRefreshToken,
		opts...,
	)
	tokenStoreServiceStoreAccessTokenMetadataHandler := connect.NewUnaryHandler(
		TokenStoreServiceStoreAccessTokenMetadataProcedure,
		svc.StoreAccessTokenMetadata,
		opts...,
	)
	tokenStoreServiceGetAccessTokenMetadataHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetAccessTokenMetadataProcedure,
		svc.GetAccessTokenMetadata,
		opts...,
	)
	tokenStoreServiceDeleteAccessTokenMetadataHandler := connect.NewUnaryHandler(
		TokenStoreServiceDeleteAccessTokenMetadataProcedure,
		svc.DeleteAccessTokenMetadata,
		opts...,
	)
	tokenStoreServiceStoreOIDCFlwHandler := connect.NewUnaryHandler(
		TokenStoreServiceStoreOIDCFlwProcedure,
		svc.StoreOIDCFlw,
		opts...,
	)
	tokenStoreServiceGetOIDCFlwHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetOIDCFlwProcedure,
		svc.GetOIDCFlw,
		opts...,
	)
	tokenStoreServiceDeleteOIDCFlwHandler := connect.NewUnaryHandler(
		TokenStoreServiceDeleteOIDCFlwProcedure,
		svc.DeleteOIDCFlw,
		opts...,
	)
	tokenStoreServiceUpdateOIDCFlwHandler := connect.NewUnaryHandler(
		TokenStoreServiceUpdateOIDCFlwProcedure,
		svc.UpdateOIDCFlw,
		opts...,
	)
	tokenStoreServiceStoreUserSessionHandler := connect.NewUnaryHandler(
		TokenStoreServiceStoreUserSessionProcedure,
		svc.StoreUserSession,
		opts...,
	)
	tokenStoreServiceGetUserSessionHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetUserSessionProcedure,
		svc.GetUserSession,
		opts...,
	)
	tokenStoreServiceDeleteUserSessionHandler := connect.NewUnaryHandler(
		TokenStoreServiceDeleteUserSessionProcedure,
		svc.DeleteUserSession,
		opts...,
	)
	tokenStoreServiceStoreDeviceAuthHandler := connect.NewUnaryHandler(
		TokenStoreServiceStoreDeviceAuthProcedure,
		svc.StoreDeviceAuth,
		opts...,
	)
	tokenStoreServiceGetDeviceAuthByDeviceCodeHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetDeviceAuthByDeviceCodeProcedure,
		svc.GetDeviceAuthByDeviceCode,
		opts...,
	)
	tokenStoreServiceGetDeviceAuthByUserCodeHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetDeviceAuthByUserCodeProcedure,
		svc.GetDeviceAuthByUserCode,
		opts...,
	)
	tokenStoreServiceUpdateDeviceAuthHandler := connect.NewUnaryHandler(
		TokenStoreServiceUpdateDeviceAuthProcedure,
		svc.UpdateDeviceAuth,
		opts...,
	)
	tokenStoreServiceDeleteDeviceAuthHandler := connect.NewUnaryHandler(
		TokenStoreServiceDeleteDeviceAuthProcedure,
		svc.DeleteDeviceAuth,
		opts...,
	)
	tokenStoreServiceStorePKCEStateHandler := connect.NewUnaryHandler(
		TokenStoreServiceStorePKCEStateProcedure,
		svc.StorePKCEState,
		opts...,
	)
	tokenStoreServiceGetPKCEStateHandler := connect.NewUnaryHandler(
		TokenStoreServiceGetPKCEStateProcedure,
		svc.GetPKCEState,
		opts...,
	)
	tokenStoreServiceDeletePKCEStateHandler := connect.NewUnaryHandler(
		TokenStoreServiceDeletePKCEStateProcedure,
		svc.DeletePKCEState,
		opts...,
	)
	return "/dts.v1.TokenStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokenStoreServiceSetProcedure:
			tokenStoreServiceSetHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetProcedure:
			tokenStoreServiceGetHandler.ServeHTTP(w, r)
		case TokenStoreServiceDeleteProcedure:
			tokenStoreServiceDeleteHandler.ServeHTTP(w, r)
		case TokenStoreServiceStoreAuthCodeProcedure:
			tokenStoreServiceStoreAuthCodeHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetAuthCodeProcedure:
			tokenStoreServiceGetAuthCodeHandler.ServeHTTP(w, r)
		case TokenStoreServiceDeleteAuthCodeProcedure:
			tokenStoreServiceDeleteAuthCodeHandler.ServeHTTP(w, r)
		case TokenStoreServiceStoreRefreshTokenProcedure:
			tokenStoreServiceStoreRefreshTokenHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetRefreshTokenProcedure:
			tokenStoreServiceGetRefreshTokenHandler.ServeHTTP(w, r)
		case TokenStoreServiceDeleteRefreshTokenProcedure:
			tokenStoreServiceDeleteRefreshTokenHandler.ServeHTTP(w, r)
		case TokenStoreServiceStoreAccessTokenMetadataProcedure:
			tokenStoreServiceStoreAccessTokenMetadataHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetAccessTokenMetadataProcedure:
			tokenStoreServiceGetAccessTokenMetadataHandler.ServeHTTP(w, r)
		case TokenStoreServiceDeleteAccessTokenMetadataProcedure:
			tokenStoreServiceDeleteAccessTokenMetadataHandler.ServeHTTP(w, r)
		case TokenStoreServiceStoreOIDCFlwProcedure:
			tokenStoreServiceStoreOIDCFlwHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetOIDCFlwProcedure:
			tokenStoreServiceGetOIDCFlwHandler.ServeHTTP(w, r)
		case TokenStoreServiceDeleteOIDCFlwProcedure:
			tokenStoreServiceDeleteOIDCFlwHandler.ServeHTTP(w, r)
		case TokenStoreServiceUpdateOIDCFlwProcedure:
			tokenStoreServiceUpdateOIDCFlwHandler.ServeHTTP(w, r)
		case TokenStoreServiceStoreUserSessionProcedure:
			tokenStoreServiceStoreUserSessionHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetUserSessionProcedure:
			tokenStoreServiceGetUserSessionHandler.ServeHTTP(w, r)
		case TokenStoreServiceDeleteUserSessionProcedure:
			tokenStoreServiceDeleteUserSessionHandler.ServeHTTP(w, r)
		case TokenStoreServiceStoreDeviceAuthProcedure:
			tokenStoreServiceStoreDeviceAuthHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetDeviceAuthByDeviceCodeProcedure:
			tokenStoreServiceGetDeviceAuthByDeviceCodeHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetDeviceAuthByUserCodeProcedure:
			tokenStoreServiceGetDeviceAuthByUserCodeHandler.ServeHTTP(w, r)
		case TokenStoreServiceUpdateDeviceAuthProcedure:
			tokenStoreServiceUpdateDeviceAuthHandler.ServeHTTP(w, r)
		case TokenStoreServiceDeleteDeviceAuthProcedure:
			tokenStoreServiceDeleteDeviceAuthHandler.ServeHTTP(w, r)
		case TokenStoreServiceStorePKCEStateProcedure:
			tokenStoreServiceStorePKCEStateHandler.ServeHTTP(w, r)
		case TokenStoreServiceGetPKCEStateProcedure:
			tokenStoreServiceGetPKCEStateHandler.ServeHTTP(w, r)
		case TokenStoreServiceDeletePKCEStateProcedure:
			tokenStoreServiceDeletePKCEStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokenStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokenStoreServiceHandler struct{}

func (UnimplementedTokenStoreServiceHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.Set is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.Get is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.Delete is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) StoreAuthCode(context.Context, *connect.Request[v1.StoreAuthCodeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.StoreAuthCode is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) GetAuthCode(context.Context, *connect.Request[v1.GetAuthCodeRequest]) (*connect.Response[v1.AuthCode], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.GetAuthCode is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) DeleteAuthCode(context.Context, *connect.Request[v1.DeleteAuthCodeRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.DeleteAuthCode is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) StoreRefreshToken(context.Context, *connect.Request[v1.StoreRefreshTokenRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.StoreRefreshToken is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) GetRefreshToken(context.Context, *connect.Request[v1.GetRefreshTokenRequest]) (*connect.Response[v1.RefreshToken], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.GetRefreshToken is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) DeleteRefreshToken(context.Context, *connect.Request[v1.DeleteRefreshTokenRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.DeleteRefreshToken is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) StoreAccessTokenMetadata(context.Context, *connect.Request[v1.StoreAccessTokenMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.StoreAccessTokenMetadata is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) GetAccessTokenMetadata(context.Context, *connect.Request[v1.GetAccessTokenMetadataRequest]) (*connect.Response[v1.AccessTokenMetadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.GetAccessTokenMetadata is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) DeleteAccessTokenMetadata(context.Context, *connect.Request[v1.DeleteAccessTokenMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.DeleteAccessTokenMetadata is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) StoreOIDCFlw(context.Context, *connect.Request[v1.StoreOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.StoreOIDCFlw is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) GetOIDCFlw(context.Context, *connect.Request[v1.GetOIDCFlwRequest]) (*connect.Response[v1.OIDCFlw], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.GetOIDCFlw is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) DeleteOIDCFlw(context.Context, *connect.Request[v1.DeleteOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.DeleteOIDCFlw is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) UpdateOIDCFlw(context.Context, *connect.Request[v1.UpdateOIDCFlwRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.UpdateOIDCFlw is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) StoreUserSession(context.Context, *connect.Request[v1.StoreUserSessionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.StoreUserSession is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) GetUserSession(context.Context, *connect.Request[v1.GetUserSessionRequest]) (*connect.Response[v1.UserSession], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.GetUserSession is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) DeleteUserSession(context.Context, *connect.Request[v1.DeleteUserSessionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.DeleteUserSession is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) StoreDeviceAuth(context.Context, *connect.Request[v1.StoreDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.StoreDeviceAuth is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) GetDeviceAuthByDeviceCode(context.Context, *connect.Request[v1.GetDeviceAuthByDeviceCodeRequest]) (*connect.Response[v1.DeviceAuth], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.GetDeviceAuthByDeviceCode is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) GetDeviceAuthByUserCode(context.Context, *connect.Request[v1.GetDeviceAuthByUserCodeRequest]) (*connect.Response[v1.DeviceAuth], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.GetDeviceAuthByUserCode is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) UpdateDeviceAuth(context.Context, *connect.Request[v1.UpdateDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.UpdateDeviceAuth is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) DeleteDeviceAuth(context.Context, *connect.Request[v1.DeleteDeviceAuthRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.DeleteDeviceAuth is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) StorePKCEState(context.Context, *connect.Request[v1.StorePKCEStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.StorePKCEState is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) GetPKCEState(context.Context, *connect.Request[v1.GetPKCEStateRequest]) (*connect.Response[v1.PKCEState], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.GetPKCEState is not implemented"))
}

func (UnimplementedTokenStoreServiceHandler) DeletePKCEState(context.Context, *connect.Request[v1.DeletePKCEStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dts.v1.TokenStoreService.DeletePKCEState is not implemented"))
}
