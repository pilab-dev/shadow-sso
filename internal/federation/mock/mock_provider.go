// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -source=provider.go -destination=mock/mock_provider.go -package=mock_federation OAuth2Provider
//

// Package mock_federation is a generated GoMock package.
package mock_federation

import (
	context "context"
	http "net/http"
	reflect "reflect"

	domain "github.com/pilab-dev/shadow-sso/domain"
	federation "github.com/pilab-dev/shadow-sso/internal/federation"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockOAuth2Provider is a mock of OAuth2Provider interface.
type MockOAuth2Provider struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2ProviderMockRecorder
	isgomock struct{}
}

// MockOAuth2ProviderMockRecorder is the mock recorder for MockOAuth2Provider.
type MockOAuth2ProviderMockRecorder struct {
	mock *MockOAuth2Provider
}

// NewMockOAuth2Provider creates a new mock instance.
func NewMockOAuth2Provider(ctrl *gomock.Controller) *MockOAuth2Provider {
	mock := &MockOAuth2Provider{ctrl: ctrl}
	mock.recorder = &MockOAuth2ProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2Provider) EXPECT() *MockOAuth2ProviderMockRecorder {
	return m.recorder
}

// ExchangeCode mocks base method.
func (m *MockOAuth2Provider) ExchangeCode(ctx context.Context, redirectURL, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, redirectURL, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExchangeCode", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCode indicates an expected call of ExchangeCode.
func (mr *MockOAuth2ProviderMockRecorder) ExchangeCode(ctx, redirectURL, code any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, redirectURL, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCode", reflect.TypeOf((*MockOAuth2Provider)(nil).ExchangeCode), varargs...)
}

// FetchUserInfo mocks base method.
func (m *MockOAuth2Provider) FetchUserInfo(ctx context.Context, token *oauth2.Token) (*federation.ExternalUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserInfo", ctx, token)
	ret0, _ := ret[0].(*federation.ExternalUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserInfo indicates an expected call of FetchUserInfo.
func (mr *MockOAuth2ProviderMockRecorder) FetchUserInfo(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserInfo", reflect.TypeOf((*MockOAuth2Provider)(nil).FetchUserInfo), ctx, token)
}

// GetAuthCodeURL mocks base method.
func (m *MockOAuth2Provider) GetAuthCodeURL(state, redirectURL string, opts ...oauth2.AuthCodeOption) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{state, redirectURL}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthCodeURL indicates an expected call of GetAuthCodeURL.
func (mr *MockOAuth2ProviderMockRecorder) GetAuthCodeURL(state, redirectURL any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{state, redirectURL}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthCodeURL", reflect.TypeOf((*MockOAuth2Provider)(nil).GetAuthCodeURL), varargs...)
}

// GetHttpClient mocks base method.
func (m *MockOAuth2Provider) GetHttpClient(ctx context.Context, token *oauth2.Token) *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHttpClient", ctx, token)
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetHttpClient indicates an expected call of GetHttpClient.
func (mr *MockOAuth2ProviderMockRecorder) GetHttpClient(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHttpClient", reflect.TypeOf((*MockOAuth2Provider)(nil).GetHttpClient), ctx, token)
}

// GetOAuth2Config mocks base method.
func (m *MockOAuth2Provider) GetOAuth2Config(redirectURL string) (*oauth2.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuth2Config", redirectURL)
	ret0, _ := ret[0].(*oauth2.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuth2Config indicates an expected call of GetOAuth2Config.
func (mr *MockOAuth2ProviderMockRecorder) GetOAuth2Config(redirectURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuth2Config", reflect.TypeOf((*MockOAuth2Provider)(nil).GetOAuth2Config), redirectURL)
}

// GetType mocks base method.
func (m *MockOAuth2Provider) GetType() domain.IdPType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(domain.IdPType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockOAuth2ProviderMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockOAuth2Provider)(nil).GetType))
}

// Name mocks base method.
func (m *MockOAuth2Provider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockOAuth2ProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockOAuth2Provider)(nil).Name))
}
